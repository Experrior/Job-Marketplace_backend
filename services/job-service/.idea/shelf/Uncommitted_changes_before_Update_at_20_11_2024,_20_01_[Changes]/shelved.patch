Index: src/main/kotlin/com/jobsearch/jobservice/entities/Job.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.entities\n\nimport com.jobsearch.jobservice.entities.quizzes.Quiz\nimport io.hypersistence.utils.hibernate.type.json.JsonType\nimport jakarta.persistence.*\nimport org.hibernate.annotations.Type\nimport java.sql.Timestamp\nimport java.time.Instant\nimport java.util.*\n\n@Entity(name = \"jobs\")\ndata class Job(\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    @Column(name = \"job_id\", updatable = false, nullable = false)\n    var jobId: UUID? = null,\n\n    @Column(name = \"recruiter_id\", nullable = false)\n    var recruiterId: UUID,\n\n    @Column(name = \"company_id\", nullable = false)\n    var companyId: UUID,\n\n    @Column(name = \"job_title\", nullable = false)\n    var title: String,\n\n    @Column(name = \"job_description\", nullable = false)\n    var description: String,\n\n    @Type(JsonType::class)\n    @Column(name = \"required_skills\", columnDefinition = \"jsonb\", nullable = false)\n    var requiredSkills: List<Skill>,\n\n    @Column(name = \"required_experience\", nullable = false)\n    var requiredExperience: String,\n\n    @Column(name = \"location\", nullable = false)\n    var location: String,\n\n    @Column(name = \"employment_type\")\n    var employmentType: String,\n\n    @Column(name = \"work_location\")\n    var workLocation: String,\n\n    @Column(name = \"salary\")\n    var salary: Int? = null,\n\n    @ManyToOne\n    @JoinColumn(name = \"quiz_id\")\n    var quiz: Quiz? = null,\n\n    @Column(name = \"created_at\", nullable = false)\n    var createdAt: Timestamp = Timestamp.from(Instant.now()),\n\n    @Column(name = \"updated_at\", nullable = true)\n    var updatedAt: Timestamp? = null,\n\n    @Column(name = \"is_deleted\", nullable = false)\n    var isDeleted: Boolean = false\n) {\n    constructor() : this(\n        companyId = UUID.randomUUID(),\n        recruiterId = UUID.randomUUID(),\n        title = \"\",\n        description = \"\",\n        requiredSkills = emptyList(),\n        requiredExperience = \"\",\n        location = \"\",\n        employmentType = \"\",\n        workLocation = \"\"\n    ){\n\n    }\n\n    @PrePersist\n    fun onCreate() {\n        createdAt = Timestamp.from(Instant.now())\n    }\n\n    @PreUpdate\n    fun onUpdate() {\n        updatedAt = Timestamp.from(Instant.now())\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/entities/Job.kt b/src/main/kotlin/com/jobsearch/jobservice/entities/Job.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/entities/Job.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/kotlin/com/jobsearch/jobservice/entities/Job.kt	(date 1731943983468)
@@ -1,13 +1,19 @@
 package com.jobsearch.jobservice.entities
 
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize
 import com.jobsearch.jobservice.entities.quizzes.Quiz
+import com.vladmihalcea.hibernate.type.json.JsonBinaryType
+
 import io.hypersistence.utils.hibernate.type.json.JsonType
 import jakarta.persistence.*
 import org.hibernate.annotations.Type
+import org.hibernate.annotations.TypeDef
+import java.io.Serializable
 import java.sql.Timestamp
 import java.time.Instant
 import java.util.*
 
+@TypeDef(name = "jsonb", typeClass = JsonBinaryType::class)
 @Entity(name = "jobs")
 data class Job(
     @Id
@@ -27,7 +33,7 @@
     @Column(name = "job_description", nullable = false)
     var description: String,
 
-    @Type(JsonType::class)
+    @Type(value=io.hypersistence.utils.hibernate.type.json.JsonBinaryType::class)
     @Column(name = "required_skills", columnDefinition = "jsonb", nullable = false)
     var requiredSkills: List<Skill>,
 
@@ -58,7 +64,7 @@
 
     @Column(name = "is_deleted", nullable = false)
     var isDeleted: Boolean = false
-) {
+): Serializable {
     constructor() : this(
         companyId = UUID.randomUUID(),
         recruiterId = UUID.randomUUID(),
Index: src/main/kotlin/com/jobsearch/jobservice/entities/Skill.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.entities\n\ndata class Skill(\n    val name: String,\n    val level: Int\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/entities/Skill.kt b/src/main/kotlin/com/jobsearch/jobservice/entities/Skill.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/entities/Skill.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/kotlin/com/jobsearch/jobservice/entities/Skill.kt	(date 1731875891447)
@@ -1,6 +1,8 @@
 package com.jobsearch.jobservice.entities
 
+import java.io.Serializable
+
 data class Skill(
     val name: String,
     val level: Int
-)
\ No newline at end of file
+)  : Serializable
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=8083\nspring.application.name=job-service\n\n# Eureka\n#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}\n\n# Database config\nspring.datasource.url=${DATASOURCE_URL}\nspring.datasource.username=${DATASOURCE_USERNAME}\nspring.datasource.password=${DATASOURCE_PASSWORD}\nspring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}\nspring.jpa.show-sql=true\nspring.datasource.hikari.auto-commit=false\n\n\n# AWS\naws.access.key=${AWS_ACCESS_KEY}\naws.secret.key=${AWS_SECRET_KEY}\naws.session.token=${AWS_SESSION_TOKEN}\naws.s3.bucket=${AWS_S3_BUCKET}\naws.region=us-east-1\n\nuser.service.url=${USER_SERVICE_URL}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/resources/application.properties	(date 1731962450914)
@@ -8,16 +8,29 @@
 spring.datasource.url=${DATASOURCE_URL}
 spring.datasource.username=${DATASOURCE_USERNAME}
 spring.datasource.password=${DATASOURCE_PASSWORD}
-spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}
+spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
 spring.jpa.show-sql=true
 spring.datasource.hikari.auto-commit=false
 
 
+# Dev tools
+spring.graphql.graphiql.enabled=true
+
+
+
 # AWS
-aws.access.key=${AWS_ACCESS_KEY}
-aws.secret.key=${AWS_SECRET_KEY}
-aws.session.token=${AWS_SESSION_TOKEN}
-aws.s3.bucket=${AWS_S3_BUCKET}
+aws.access.key=ASIA5VWKPPNUSYJOX673
+aws.secret.key=qftPdvwU3azRgaffU8K6hl9ZA5NqAwcG2Taw6TP+
+aws.session.token=IQoJb3JpZ2luX2VjEMz//////////wEaCXVzLXdlc3QtMiJHMEUCIBH0h7CULODexUCcxhBtGScEWibIuZ6dMx+2NZmWClstAiEApYKBuJdDTvDf6l5jcVkO89Ylyg9K9F8XpCxA8OOrtScqqQIIZRACGgw5Mzk5NDg3MzUzMzciDFl1KaOXQcN9A/yG2iqGAjabSYOhPgSV9k26TUeRsy79ioARIBARzHVLm8mn7uP0kbtpppJcBNCaY3LGdnaJD82uqWRWTowwUvuS2mLmyPBvDbOLNwOjrnY1p6JcG6pKvrJswvHWIk03JSm7VM4uXX5hAahTBLP3IrYUyUmqKSoviT8BjL3y0XioMAmKIW5880k9LTyHQqsrOSPshq8vJcb2/T5l2/Hvr1GLuMC7Q+okbHblEy77ei7ydIwS6v97xvc+8I+fbyxCGdAKxshU/9whXm1YLq9aHcSVL2mLaGv4SdcGTuCAwKEiGhtSWl7ea5sNhQX0fZFXFASPp/PEYBYKquFnkGQ/A3tEwE11HtiooYx3EhAw+LzuuQY6nQEb0s1niPUibxKYlXe58bwxIqJK1X++AcyiK5/TOZAjOEVip9LNAciF9yad6yzj2m/kSgtMxZT+VhAHe5Sf+w8fEPHQSD2LkxU7SzxIdR5Kv3pT79hwQgQ2oEKxVeblhO4UN++P5Att5VBNtvAhySo4TjXTbubgu20mgJuzs8MO1nhwh6Xkvvn7BJ/bwpDRZi0Jr/F1CicO0CVPn9r8
+aws.s3.bucket=jobsearch-file-storage-kjnhbgvfcdrxesdrftghjkhbgtvfrdeswrdtfg
 aws.region=us-east-1
 
-user.service.url=${USER_SERVICE_URL}
\ No newline at end of file
+user.service.url=${USER_SERVICE_URL}
+
+
+# Logging
+debug_level=DEBUG
+logging.level.org.springframework.web=${debug_level}
+logging.level.org.hibernate=${debug_level}
+logging.level.graphiql=${debug_level}
+logging.level.graphql=${debug_level}
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.3.5</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>org.jobsearch</groupId>\n    <artifactId>job-service</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>job-service</name>\n    <description>job-service</description>\n    <url/>\n    <licenses>\n        <license/>\n    </licenses>\n    <developers>\n        <developer/>\n    </developers>\n    <scm>\n        <connection/>\n        <developerConnection/>\n        <tag/>\n        <url/>\n    </scm>\n    <properties>\n        <java.version>17</java.version>\n        <kotlin.version>1.9.25</kotlin.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-graphql</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-validation</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>jakarta.persistence</groupId>\n            <artifactId>jakarta.persistence-api</artifactId>\n            <version>3.1.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-reflect</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-stdlib</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.jetbrains.kotlin</groupId>\n            <artifactId>kotlin-test-junit5</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.module</groupId>\n            <artifactId>jackson-module-kotlin</artifactId>\n        </dependency>\n        <!--\t\tDatabase\t\t-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-jpa</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <scope>runtime</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.hypersistence</groupId>\n            <artifactId>hypersistence-utils-hibernate-63</artifactId>\n            <version>3.8.3</version>\n        </dependency>\n        <!--\t\tSecurity\t\t-->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        <!--\t\tEureka\t\t\t-->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n            <version>4.1.3</version>\n        </dependency>\n        <!--    AWS    -->\n<!--        <dependency>-->\n<!--            <groupId>com.amazonaws</groupId>-->\n<!--            <artifactId>aws-java-sdk-s3</artifactId>-->\n<!--            <version>1.12.777</version>-->\n<!--        </dependency>-->\n        <dependency>\n            <groupId>software.amazon.awssdk</groupId>\n            <artifactId>s3</artifactId>\n            <version>2.29.8</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>\n        <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <groupId>org.jetbrains.kotlin</groupId>\n                <artifactId>kotlin-maven-plugin</artifactId>\n                <configuration>\n                    <args>\n                        <arg>-Xjsr305=strict</arg>\n                    </args>\n                    <compilerPlugins>\n                        <plugin>spring</plugin>\n                    </compilerPlugins>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.jetbrains.kotlin</groupId>\n                        <artifactId>kotlin-maven-allopen</artifactId>\n                        <version>${kotlin.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/pom.xml	(date 1732128782203)
@@ -27,8 +27,8 @@
         <url/>
     </scm>
     <properties>
-        <java.version>17</java.version>
-        <kotlin.version>1.9.25</kotlin.version>
+        <java.version>21</java.version>
+        <kotlin.version>2.0.10</kotlin.version>
     </properties>
     <dependencies>
         <dependency>
@@ -97,22 +97,23 @@
             <artifactId>spring-boot-starter-security</artifactId>
         </dependency>
         <!--		Eureka			-->
-        <dependency>
-            <groupId>org.springframework.cloud</groupId>
-            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
-            <version>4.1.3</version>
-        </dependency>
+        <!--        <dependency>-->
+        <!--            <groupId>org.springframework.cloud</groupId>-->
+        <!--            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>-->
+        <!--            <version>4.1.3</version>-->
+        <!--        </dependency>-->
         <!--    AWS    -->
-<!--        <dependency>-->
-<!--            <groupId>com.amazonaws</groupId>-->
-<!--            <artifactId>aws-java-sdk-s3</artifactId>-->
-<!--            <version>1.12.777</version>-->
-<!--        </dependency>-->
+        <!--        <dependency>-->
+        <!--            <groupId>com.amazonaws</groupId>-->
+        <!--            <artifactId>aws-java-sdk-s3</artifactId>-->
+        <!--            <version>1.12.777</version>-->
+        <!--        </dependency>-->
         <dependency>
             <groupId>software.amazon.awssdk</groupId>
             <artifactId>s3</artifactId>
             <version>2.29.8</version>
         </dependency>
+
     </dependencies>
 
     <build>
Index: src/main/kotlin/com/jobsearch/jobservice/services/UserServiceUtilsImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.services\n\nimport org.slf4j.LoggerFactory\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.stereotype.Service\nimport org.springframework.web.reactive.function.client.WebClient\nimport java.util.*\nimport java.util.concurrent.ConcurrentHashMap\n\n@Service\nclass UserServiceUtilsImpl(\n    webClientBuilder: WebClient.Builder\n) : UserServiceUtils {\n\n    private val webClient: WebClient = webClientBuilder.build()\n    private val companyNameCache = ConcurrentHashMap<UUID, String>()\n    private val logger = LoggerFactory.getLogger(UserServiceUtilsImpl::class.java)\n\n    @Value(\"\\${user.service.url}\")\n    lateinit var userServiceUrl: String\n\n    private fun createHeaders(): Map<String, String> {\n        val authentication = SecurityContextHolder.getContext().authentication\n        return mapOf(\n            \"X-User-Id\" to authentication.name,\n            \"X-User-Roles\" to authentication.authorities.joinToString(\",\") { it.authority }\n        )\n    }\n\n    private fun executeGraphQLQuery(query: String): Map<String, Any?>? {\n        val headers = createHeaders()\n        return webClient.post()\n            .uri(\"$userServiceUrl/graphql\")\n            .headers { it.setAll(headers) }\n            .bodyValue(mapOf(\"query\" to query))\n            .retrieve()\n            .bodyToMono(Any::class.java)\n            .block()?.let {\n                @Suppress(\"UNCHECKED_CAST\")\n                it as? Map<String, Any?>\n            }\n    }\n\n    override fun getRecruiterCompany(): UUID {\n        val query = \"\"\"\n            query {\n                recruiterCompany\n            }\n        \"\"\".trimIndent()\n\n        val response = executeGraphQLQuery(query)\n        val companyId = (response?.get(\"data\") as? Map<*, *>)?.get(\"recruiterCompany\") as? String\n            ?: throw IllegalStateException(\"Recruiter company ID not found\")\n\n        return UUID.fromString(companyId)\n    }\n\n    override fun getApplicantFullName(userId: UUID): String {\n        val query = \"\"\"\n            query {\n                userFullName(userId: \"$userId\")\n            }\n        \"\"\".trimIndent()\n\n        val response = executeGraphQLQuery(query)\n        return (response?.get(\"data\") as? Map<*, *>)?.get(\"userFullName\") as? String\n            ?: throw IllegalStateException(\"User full name not found\")\n    }\n\n    override fun getCompanyName(companyId: UUID): String {\n        return companyNameCache.computeIfAbsent(companyId) {\n            val query = \"\"\"\n                query {\n                    companyById(companyId: \"$companyId\") {\n                        name\n                    }\n                }\n            \"\"\".trimIndent()\n\n            val response = executeGraphQLQuery(query)\n            (response?.get(\"data\") as? Map<*, *>)?.get(\"companyById\")?.let { company ->\n                (company as? Map<*, *>)?.get(\"name\") as? String\n            } ?: throw IllegalStateException(\"Company name not found\")\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/services/UserServiceUtilsImpl.kt b/src/main/kotlin/com/jobsearch/jobservice/services/UserServiceUtilsImpl.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/services/UserServiceUtilsImpl.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/kotlin/com/jobsearch/jobservice/services/UserServiceUtilsImpl.kt	(date 1731961468166)
@@ -17,8 +17,8 @@
     private val companyNameCache = ConcurrentHashMap<UUID, String>()
     private val logger = LoggerFactory.getLogger(UserServiceUtilsImpl::class.java)
 
-    @Value("\${user.service.url}")
-    lateinit var userServiceUrl: String
+//    @Value("\${user.service.url}")
+//    lateinit var userServiceUrl: String
 
     private fun createHeaders(): Map<String, String> {
         val authentication = SecurityContextHolder.getContext().authentication
@@ -31,7 +31,7 @@
     private fun executeGraphQLQuery(query: String): Map<String, Any?>? {
         val headers = createHeaders()
         return webClient.post()
-            .uri("$userServiceUrl/graphql")
+            .uri("http://172.22.0.1:8081/graphql")
             .headers { it.setAll(headers) }
             .bodyValue(mapOf("query" to query))
             .retrieve()
@@ -69,6 +69,7 @@
     }
 
     override fun getCompanyName(companyId: UUID): String {
+        logger.info("Company id: $companyId")
         return companyNameCache.computeIfAbsent(companyId) {
             val query = """
                 query {
@@ -81,7 +82,7 @@
             val response = executeGraphQLQuery(query)
             (response?.get("data") as? Map<*, *>)?.get("companyById")?.let { company ->
                 (company as? Map<*, *>)?.get("name") as? String
-            } ?: throw IllegalStateException("Company name not found")
+            } ?: throw IllegalStateException("Company name not found for company id $companyId")
         }
     }
 }
Index: ../user-service/src/main/kotlin/com/jobsearch/userservice/controllers/CompanyController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.userservice.controllers\n\nimport com.jobsearch.userservice.entities.Company\nimport com.jobsearch.userservice.services.CompanyService\nimport org.springframework.graphql.data.method.annotation.Argument\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.stereotype.Controller\nimport java.util.*\n\n@Controller\nclass CompanyController(\n    private val companyService: CompanyService\n) {\n    @QueryMapping\n    fun companies(): List<Company> {\n        return companyService.getAllCompanies()\n    }\n\n    @QueryMapping\n    fun companyById(@Argument companyId: UUID): Company {\n        return companyService.findCompanyById(companyId)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../user-service/src/main/kotlin/com/jobsearch/userservice/controllers/CompanyController.kt b/../user-service/src/main/kotlin/com/jobsearch/userservice/controllers/CompanyController.kt
--- a/../user-service/src/main/kotlin/com/jobsearch/userservice/controllers/CompanyController.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../user-service/src/main/kotlin/com/jobsearch/userservice/controllers/CompanyController.kt	(date 1732127392380)
@@ -5,8 +5,11 @@
 import org.springframework.graphql.data.method.annotation.Argument
 import org.springframework.graphql.data.method.annotation.QueryMapping
 import org.springframework.stereotype.Controller
+import org.springframework.web.bind.annotation.GetMapping
+import org.springframework.web.bind.annotation.RestController
 import java.util.*
 
+@RestController
 @Controller
 class CompanyController(
     private val companyService: CompanyService
@@ -20,4 +23,10 @@
     fun companyById(@Argument companyId: UUID): Company {
         return companyService.findCompanyById(companyId)
     }
+
+    @GetMapping("/getCompanies")
+    fun registerApplicant(): List<Company> {
+        return companyService.getAllCompanies()
+
+    }
 }
\ No newline at end of file
Index: src/main/kotlin/com/jobsearch/jobservice/config/WebClientConfig.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.config\n\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.reactive.function.client.WebClient\n\n@Configuration\nclass WebClientConfig {\n    @Bean\n    @LoadBalanced\n    fun webClientBuilder(): WebClient.Builder {\n        return WebClient.builder()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/config/WebClientConfig.kt b/src/main/kotlin/com/jobsearch/jobservice/config/WebClientConfig.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/config/WebClientConfig.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/kotlin/com/jobsearch/jobservice/config/WebClientConfig.kt	(date 1731874376538)
@@ -1,6 +1,5 @@
 package com.jobsearch.jobservice.config
 
-import org.springframework.cloud.client.loadbalancer.LoadBalanced
 import org.springframework.context.annotation.Bean
 import org.springframework.context.annotation.Configuration
 import org.springframework.web.reactive.function.client.WebClient
@@ -8,7 +7,6 @@
 @Configuration
 class WebClientConfig {
     @Bean
-    @LoadBalanced
     fun webClientBuilder(): WebClient.Builder {
         return WebClient.builder()
     }
Index: ../user-service/src/main/kotlin/com/jobsearch/userservice/config/SecurityConfig.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.userservice.config\n\nimport com.jobsearch.userservice.entities.UserRole\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.http.HttpStatus\nimport org.springframework.security.authentication.AuthenticationManager\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity\nimport org.springframework.security.config.annotation.web.invoke\nimport org.springframework.security.config.http.SessionCreationPolicy\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder\nimport org.springframework.security.web.AuthenticationEntryPoint\nimport org.springframework.security.web.SecurityFilterChain\nimport org.springframework.security.web.authentication.HttpStatusEntryPoint\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter\n\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(securedEnabled = true)\nclass SecurityConfig(\n    private val customHeaderAuthenticationFilter: CustomHeaderAuthenticationFilter\n) {\n    @Bean\n    fun filterChain(http: HttpSecurity): SecurityFilterChain {\n        http {\n            csrf { disable() }\n            authorizeHttpRequests {\n                authorize(\"/register/**\", permitAll)\n                authorize(\"/login\", permitAll)\n                authorize(\"/verification/**\", permitAll)\n                authorize(\"/token/**\", permitAll)\n                authorize(\"/resetPassword\", permitAll)\n                authorize(\"/updatePassword\", permitAll)\n                authorize(\"/error\", permitAll)\n                authorize(\"/recruiter\", hasRole(UserRole.RECRUITER.name))\n                authorize(\"/applicant\", hasRole(UserRole.APPLICANT.name))\n                authorize(anyRequest, authenticated)\n            }\n            sessionManagement {\n                sessionCreationPolicy = SessionCreationPolicy.STATELESS\n            }\n            exceptionHandling {\n                authenticationEntryPoint = unauthorizedEntryPoint()\n            }\n            anonymous { disable() }\n            addFilterBefore<UsernamePasswordAuthenticationFilter>(customHeaderAuthenticationFilter)\n        }\n        return http.build()\n    }\n\n    @Bean\n    fun unauthorizedEntryPoint(): AuthenticationEntryPoint {\n        return HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED)\n    }\n\n    @Bean\n    fun passwordEncoder(): BCryptPasswordEncoder {\n        return BCryptPasswordEncoder()\n    }\n\n    @Bean\n    @Throws(Exception::class)\n    fun authenticationManager(authenticationConfiguration: AuthenticationConfiguration): AuthenticationManager {\n        return authenticationConfiguration.authenticationManager\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../user-service/src/main/kotlin/com/jobsearch/userservice/config/SecurityConfig.kt b/../user-service/src/main/kotlin/com/jobsearch/userservice/config/SecurityConfig.kt
--- a/../user-service/src/main/kotlin/com/jobsearch/userservice/config/SecurityConfig.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../user-service/src/main/kotlin/com/jobsearch/userservice/config/SecurityConfig.kt	(date 1732126487116)
@@ -35,6 +35,7 @@
                 authorize("/token/**", permitAll)
                 authorize("/resetPassword", permitAll)
                 authorize("/updatePassword", permitAll)
+                authorize("/getCompanies", permitAll)
                 authorize("/error", permitAll)
                 authorize("/recruiter", hasRole(UserRole.RECRUITER.name))
                 authorize("/applicant", hasRole(UserRole.APPLICANT.name))
Index: ../user-service/src/main/kotlin/com/jobsearch/userservice/entities/User.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.userservice.entities\n\nimport jakarta.persistence.*\nimport org.springframework.security.core.GrantedAuthority\nimport org.springframework.security.core.authority.SimpleGrantedAuthority\nimport org.springframework.security.core.userdetails.UserDetails\nimport java.sql.Timestamp\nimport java.time.Instant\nimport java.util.*\n\n@Entity(name = \"users\")\nclass User(\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    @Column(name = \"user_id\", updatable = false, nullable = false)\n    val userId: UUID? = null,\n    @Column(nullable = false)\n    var email: String = \"\",\n    @Column(nullable = false)\n    var firstName: String = \"\",\n    @Column(nullable = false)\n    var lastName: String = \"\",\n    @Column(nullable = false)\n    private var password: String = \"\",\n    @Enumerated(EnumType.STRING)\n    @Column(nullable = false)\n    var role: UserRole = UserRole.APPLICANT,\n    @Column(nullable = true)\n    var companyId: UUID? = null,\n    @OneToOne(mappedBy = \"user\", cascade = [CascadeType.REMOVE], orphanRemoval = true)\n    var verificationToken: VerificationToken? = null,\n    @Column(nullable = false)\n    private var isEnabled: Boolean = false,\n    @Column(nullable = false)\n    var isEmailVerified: Boolean = false,\n    @Column(nullable = false)\n    var isEmployeeVerified: Boolean = false,\n    @Column(nullable = false)\n    var createdAt: Timestamp = Timestamp(0),\n    @Column(nullable = false)\n    var updatedAt: Timestamp = Timestamp(0)\n    ): UserDetails {\n    @PrePersist\n    fun onCreate() {\n        val currentTimestamp = Timestamp.from(Instant.now())\n        createdAt = currentTimestamp\n    }\n\n    @PreUpdate\n    fun onUpdate() {\n        updatedAt = Timestamp.from(Instant.now())\n    }\n\n    override fun getAuthorities(): Collection<GrantedAuthority> {\n        return listOf(SimpleGrantedAuthority(role.name))\n    }\n\n    override fun getPassword(): String {\n        return this.password\n    }\n\n    override fun getUsername(): String {\n        return this.email\n    }\n\n    fun setPassword(newPassword: String){\n        this.password = newPassword\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../user-service/src/main/kotlin/com/jobsearch/userservice/entities/User.kt b/../user-service/src/main/kotlin/com/jobsearch/userservice/entities/User.kt
--- a/../user-service/src/main/kotlin/com/jobsearch/userservice/entities/User.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../user-service/src/main/kotlin/com/jobsearch/userservice/entities/User.kt	(date 1731962886322)
@@ -8,7 +8,7 @@
 import java.time.Instant
 import java.util.*
 
-@Entity(name = "users")
+@Entity(name = "app_users")
 class User(
     @Id
     @GeneratedValue(strategy = GenerationType.UUID)
Index: ../db_mockup/requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>requests\ntqdm\nsqlalchemy\npsycopg\ndb_mockdata==0.2.01\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/requirements.txt b/../db_mockup/requirements.txt
--- a/../db_mockup/requirements.txt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../db_mockup/requirements.txt	(date 1731880674943)
@@ -2,4 +2,5 @@
 tqdm
 sqlalchemy
 psycopg
-db_mockdata==0.2.01
+numpy
+db_mockdata==0.4.3
Index: ../user-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Application config\nserver.port=8081\nspring.application.name=user-service\nspring.main.banner-mode=off\n# Database config\nspring.datasource.url=${DATASOURCE_URL}\nspring.datasource.username=${DATASOURCE_USERNAME}\nspring.datasource.password=${DATASOURCE_PASSWORD}\n# spring.datasource.url=jdbc:postgresql://172.22.0.1:5432/JobMarketDB\n# spring.datasource.username=admin\n# spring.datasource.password=test\nspring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\nspring.jpa.show-sql=true\n\n# GraphQL\nspring.graphql.graphiql.enabled=true\n\n#LOGGING\ndebug_level=DEBUG\nlogging.level.org.springframework.web=${debug_level}\nlogging.level.org.hibernate=${debug_level}\nlogging.level.graphiql=${debug_level}\nlogging.level.graphql=${debug_level}\n\n# Eureka\n#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}\n\n# JWT\n#  jwt.secret=3245e6yr7ut8iur65e4r3e2ewrgthjctgdr43e2ewrgthyfj65td4rewd\n#  jwt.expiration-s=12000\n#  jwt.refresh-expiration-s=12000\njwt.secret=${JWT_SECRET}\njwt.expiration-s=${JWT_EXPIRATIONS_S:1800}\njwt.refresh-expiration-s=${JWT_REFRESH_EXPIRATIONS_S:86400}\n\n\n\n\n#RabbitMQ settings\nspring.rabbitmq.host=172.22.0.1\n#rabbitmq.virtualhost=/\nspring.rabbitmq.port=5672\n#rabbitmq.username=guest\n#rabbitmq.password=guest\n#rabbitmq.exchange=rabbitmq.exchange\n#rabbitmq.queue=rabbitmq.queue\n#rabbitmq.routingkey=rabbitmq.routingkey\n#rabbitmq.reply.timeout=60000\n#rabbitmq.concurrent.consumers=1\n#rabbitmq.max.concurrent.consumers=1\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../user-service/src/main/resources/application.properties b/../user-service/src/main/resources/application.properties
--- a/../user-service/src/main/resources/application.properties	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../user-service/src/main/resources/application.properties	(date 1732126339694)
@@ -9,7 +9,7 @@
 # spring.datasource.url=jdbc:postgresql://172.22.0.1:5432/JobMarketDB
 # spring.datasource.username=admin
 # spring.datasource.password=test
-spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}
+spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 
 spring.jpa.show-sql=true
@@ -31,9 +31,9 @@
 #  jwt.secret=3245e6yr7ut8iur65e4r3e2ewrgthjctgdr43e2ewrgthyfj65td4rewd
 #  jwt.expiration-s=12000
 #  jwt.refresh-expiration-s=12000
-jwt.secret=${JWT_SECRET}
-jwt.expiration-s=${JWT_EXPIRATIONS_S:1800}
-jwt.refresh-expiration-s=${JWT_REFRESH_EXPIRATIONS_S:86400}
+jwt.secret=#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eurek#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eurek#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eurek#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eurek
+jwt.expiration-s=1800
+jwt.refresh-expiration-s=86400
 
 
 
Index: ../db_mockup/mockdata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"connection\": \"postgresql+psycopg2://admin:test@172.22.0.2:5432/JobMarketDB\",\n  \"tables\": {\n    \"app_users\": {\n      \"user_id\": \"PK UUID\",\n      \"company\": \"FK_UUID company.company_id\",\n      \"email\": \"email UNIQUE\",\n      \"first_name\": \"first_name\",\n      \"last_name\": \"last_name\",\n      \"role\": \"first_name\",\n      \"is_blocked\": \"bool\",\n      \"email_verified\": \"bool\",\n      \"employee_verified\": \"bool\",\n      \"created_at\": \"timestamp\",\n      \"password_hash\": \"first_name\"\n    },\n    \"skills\": {\n      \"skill_id\": \"PK UUID\",\n      \"profile_id\": \"FK_UUID user_profiles.profile_id\",\n      \"skill_name\": \"first_name\",\n      \"proficiency_level\": \"first_name\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"chat_messages\": {\n      \"message_id\": \"PK UUID\",\n      \"chat_id\": \"FK_UUID chats.chat_id\",\n      \"content\": \"long_text\",\n      \"created_by\": \"FK_UUID app_users.user_id\",\n      \"created_by_display\": \"first_name\",\n      \"read_by\": \"first_name\",\n      \"deleted_by\": \"first_name\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"job\": {\n      \"job_id\": \"PK UUID\",\n      \"company_id\": \"FK_UUID company.company_id\",\n      \"job_title\": \"first_name\",\n      \"job_description\": \"long_text\",\n      \"required_skills\": \"long_text\",\n      \"required_experience\": \"long_text\",\n      \"location\": \"first_name\",\n      \"salary\": \"integer CONST None\",\n      \"created_at\": \"timestamp\"\n    },\n    \"experiences\": {\n      \"experience_id\": \"PK UUID\",\n      \"profile_id\": \"FK_UUID user_profiles.profile_id\",\n      \"company_name\": \"FK_UUID company.company_id\",\n      \"role\": \"first_name\",\n      \"start_date\": \"timestamp\",\n      \"end_date\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"educations\": {\n      \"education_id\": \"PK UUID\",\n      \"profile_id\": \"first_name\",\n      \"institution_name\": \"first_name\",\n      \"degree\": \"first_name\",\n      \"start_date\": \"timestamp\",\n      \"end_date\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"company\": {\n      \"company_id\": \"PK UUID\",\n      \"company_name\": \"first_name\",\n      \"email\": \"email UNIQUE\",\n      \"logoPath\": \"first_name\",\n      \"location\": \"first_name\",\n      \"industry\": \"first_name\",\n      \"description\": \"first_name\",\n      \"verified\": \"bool\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"chats\": {\n      \"chat_id\": \"PK UUID\",\n      \"name\": \"first_name\",\n      \"created_by\": \"first_name\",\n      \"deleted_by\": \"first_name\",\n      \"last_message\": \"first_name\",\n      \"tags\": \"first_name\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"IntermediaryTable: user_chats\":{\n      \"chat_id\": \"FK_UUID chats.chat_id\",\n      \"user_id\": \"FK_UUID app_users.user_id\"\n    },\n    \"user_profiles\": {\n      \"profile_id\": \"PK UUID\",\n      \"user_id\": \"FK_UUID app_users.user_id\",\n      \"resume_path\": \"first_name\",\n      \"profile_picture_path\": \"first_name\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"user_settings\": {\n      \"settings_id\": \"PK UUID\",\n      \"user_id\": \"FK_UUID app_users.user_id\",\n      \"offers_notification\": \"bool\",\n      \"newsletter_notification\": \"bool\",\n      \"recruiter_messages\": \"bool\",\n      \"push_notification\": \"bool\",\n      \"updated_at\": \"timestamp\"\n    }\n  },\n  \"objects_count\": {\n    \"app_users\": 200,\n    \"skills\": 500,\n    \"chat_messages\": 8000,\n    \"job\": 250,\n    \"experiences\": 100,\n    \"educations\": 200,\n    \"company\": 20,\n    \"chats\": 50,\n    \"user_profiles\": 500,\n    \"user_settings\": 500,\n    \"user_chats\": 10000\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/mockdata.json b/../db_mockup/mockdata.json
--- a/../db_mockup/mockdata.json	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../db_mockup/mockdata.json	(date 1732126628138)
@@ -1,25 +1,32 @@
 {
-  "connection": "postgresql+psycopg2://admin:test@172.22.0.2:5432/JobMarketDB",
+  "connection": "postgresql+psycopg2://admin:test@172.22.0.1:5432/JobMarketDB",
   "tables": {
     "app_users": {
       "user_id": "PK UUID",
-      "company": "FK_UUID company.company_id",
+      "company_id": "FK_UUID company.company_id",
       "email": "email UNIQUE",
       "first_name": "first_name",
       "last_name": "last_name",
-      "role": "first_name",
+      "role": "OPTION IN (recruiter,applicant)",
+      "phone": "first_name",
       "is_blocked": "bool",
+      "is_email_verified": "bool",
+      "is_employee_verified": "bool",
+      "is_enabled": "bool",
+      "verification_token": "bool",
       "email_verified": "bool",
       "employee_verified": "bool",
-      "created_at": "timestamp",
-      "password_hash": "first_name"
+      "updated_at":"timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "password_hash": "first_name",
+      "password": "first_name"
     },
     "skills": {
       "skill_id": "PK UUID",
       "profile_id": "FK_UUID user_profiles.profile_id",
       "skill_name": "first_name",
       "proficiency_level": "first_name",
-      "updated_at": "timestamp"
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "chat_messages": {
       "message_id": "PK UUID",
@@ -29,49 +36,83 @@
       "created_by_display": "first_name",
       "read_by": "first_name",
       "deleted_by": "first_name",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
-    "job": {
+    "jobs": {
       "job_id": "PK UUID",
       "company_id": "FK_UUID company.company_id",
-      "job_title": "first_name",
+      "job_title": "OPTION IN (Software Engineer, Front-End Developer, Back-End Developer, Full-Stack Developer, Mobile Developer, Game Developer, Web Developer, DevOps Engineer, Software Architect, Data Scientist, Machine Learning Engineer, AI Engineer, Software Tester, Quality Assurance Engineer, UI/UX Designer, Network Engineer, Network Architect, Cybersecurity Analyst, Information Security Analyst, Penetration Tester, Security Engineer, Cloud Security Engineer, Database Administrator, Data Engineer, Data Analyst, IT Support Specialist, Help Desk Technician, Systems Administrator, Cloud Architect, Cloud Engineer, Cloud DevOps Engineer, Project Manager, Scrum Master, Product Manager, Technical Writer, IT Consultant, Business Analyst, Digital Marketing Specialist, UX Researcher, Technical Support Engineer)",
+      "quiz_id": "FK_UUID quizzes.quiz_id",
       "job_description": "long_text",
-      "required_skills": "long_text",
-      "required_experience": "long_text",
-      "location": "first_name",
-      "salary": "integer CONST None",
-      "created_at": "timestamp"
+      "recruiter_id": "FK_UUID app_users.user_id",
+      "required_skills": "jsonb:json1 value:required_skills",
+      "required_experience": "long_text RANGE(4,10)",
+      "employment_type": "OPTION IN (full-time,part-time)",
+      "work_location": "OPTION IN (remote,hybrid,stationary)",
+      "is_deleted": "bool",
+      "location": "country+city(\"en_US\",\"en_GB\",\"fr_FR\",\"de_DE\",\"it_IT\",\"es_ES\",\"pl_PL\",\"nl_NL\",\"pt_PT\",\"sv_SE\",\"da_DK\",\"fi_FI\",\"no_NO\",\"cs_CZ\",\"hu_HU\",\"en_CA\",\"sk_SK\")",
+      "salary": "integer RANGE(4000,12000)",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "experiences": {
       "experience_id": "PK UUID",
       "profile_id": "FK_UUID user_profiles.profile_id",
       "company_name": "FK_UUID company.company_id",
+      "company_logo": "first_name",
       "role": "first_name",
-      "start_date": "timestamp",
-      "end_date": "timestamp",
-      "updated_at": "timestamp"
+      "start_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "end_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+    },
+    "applications":{
+      "application_id": "PK UUID",
+      "status": "smallint RANGE(1,6)",
+      "job_id": "FK_UUID jobs.job_id",
+      "quiz_result_id": "FK_UUID quiz_results.quiz_result_id",
+      "user_id": "FK_UUID app_users.user_id",
+      "s3_resume_path": "first_name",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+    },
+    "quiz_results": {
+      "quiz_result_id": "PK UUID",
+      "score": "float RANGE(0,100)",
+      "time_taken": "integer RANGE(20,2000) DISTRIBUTION(normal,mean=60,std=15)",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "applicant_id": "FK_UUID app_users.user_id",
+      "quiz_id": "FK_UUID quizzes.quiz_id"
+    },
+    "quizzes": {
+      "quiz_id": "PK UUID",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "is_deleted": "bool",
+      "quiz_url": "first_name",
+      "s3_quiz_path": "first_name",
+      "recruiter_id": "FK_UUID app_users.user_id"
     },
     "educations": {
       "education_id": "PK UUID",
       "profile_id": "first_name",
       "institution_name": "first_name",
       "degree": "first_name",
-      "start_date": "timestamp",
-      "end_date": "timestamp",
-      "updated_at": "timestamp"
+      "start_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "end_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "company": {
       "company_id": "PK UUID",
-      "company_name": "first_name",
+      "name": "OPTION IN (Google, Nokia, Volvo, Vercel, Youtube, Wirtualna Polska, Amazon, Booksy, GlobalLogic, Sirocco, Creotech, Aria, Opera)",
       "email": "email UNIQUE",
-      "logoPath": "first_name",
-      "location": "first_name",
+      "logo_path": "first_name",
+      "location": "country+city(\"en_US\",\"en_GB\",\"fr_FR\",\"de_DE\",\"it_IT\",\"es_ES\",\"pl_PL\",\"nl_NL\",\"pt_PT\",\"sv_SE\",\"da_DK\",\"fi_FI\",\"no_NO\",\"cs_CZ\",\"hu_HU\",\"en_CA\",\"sk_SK\")",
       "industry": "first_name",
       "description": "first_name",
-      "verified": "bool",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
+      "is_email_verified": "boolean",
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "chats": {
       "chat_id": "PK UUID",
@@ -80,8 +121,8 @@
       "deleted_by": "first_name",
       "last_message": "first_name",
       "tags": "first_name",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
+      "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "IntermediaryTable: user_chats":{
       "chat_id": "FK_UUID chats.chat_id",
@@ -92,7 +133,7 @@
       "user_id": "FK_UUID app_users.user_id",
       "resume_path": "first_name",
       "profile_picture_path": "first_name",
-      "updated_at": "timestamp"
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
     },
     "user_settings": {
       "settings_id": "PK UUID",
@@ -101,20 +142,62 @@
       "newsletter_notification": "bool",
       "recruiter_messages": "bool",
       "push_notification": "bool",
-      "updated_at": "timestamp"
+      "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+    },
+    "IntermediaryTable: followed_jobs": {
+        "job_id": "FK_UUID jobs.job_id",
+        "user_id": "FK_UUID app_users.user_id",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+    },
+    "IntermediaryTable: viewed_jobs": {
+      "user_id": "FK_UUID app_users.user_id",
+      "job_id": "FK_UUID jobs.job_id",
+      "view_count": "integer RANGE(10,200)"
     }
   },
+  "json_schemas": [
+    {
+      "json1": {
+        "fields": [
+          {
+            "required_skills": {
+               "type": "array",
+               "item_count": "RANGE(1, 5)",
+               "content": {
+                  "type": "object",
+                  "fields": {
+                    "name": {
+                      "type": "string",
+                      "options": ["Python", "JavaScript", "Java", "C++", "Go", "Ruby"]
+                    },
+                    "level": {
+                      "type": "integer",
+                      "range": [1, 5]
+                    }
+                  }
+               }
+            }
+          }
+        ]
+      }
+    }
+  ],
   "objects_count": {
-    "app_users": 200,
-    "skills": 500,
-    "chat_messages": 8000,
-    "job": 250,
-    "experiences": 100,
-    "educations": 200,
-    "company": 20,
-    "chats": 50,
-    "user_profiles": 500,
-    "user_settings": 500,
-    "user_chats": 10000
+    "app_users": 5,
+    "skills": 50,
+    "chat_messages": 6,
+    "jobs": 50,
+    "experiences": 10,
+    "educations": 20,
+    "company": 5,
+    "chats": 1,
+    "user_profiles": 2,
+    "user_settings": 2,
+    "user_chats": 2,
+    "quizzes": 2,
+    "quiz_results": 2,
+    "applications": 2,
+    "followed_jobs": 20,
+    "viewed_jobs": 2
   }
 }
Index: ../chat_go/go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module chat\n\ngo 1.23.2\n\nrequire gorm.io/gorm v1.25.12\n\nrequire (\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a // indirect\n\tgithub.com/jackc/pgx/v5 v5.5.5 // indirect\n\tgithub.com/jackc/puddle/v2 v2.2.1 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgolang.org/x/crypto v0.17.0 // indirect\n\tgolang.org/x/sync v0.1.0 // indirect\n)\n\nrequire (\n\tgithub.com/gorilla/mux v1.8.1\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/jackc/pgx v3.6.2+incompatible\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\n\tgithub.com/jinzhu/now v1.1.5 // indirect\n\tgithub.com/lib/pq v1.10.9\n\tgolang.org/x/text v0.14.0 // indirect\n\tgorm.io/driver/postgres v1.5.9\n)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../chat_go/go.mod b/../chat_go/go.mod
--- a/../chat_go/go.mod	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../chat_go/go.mod	(date 1731874383535)
@@ -15,6 +15,7 @@
 )
 
 require (
+	github.com/google/uuid v1.6.0
 	github.com/gorilla/mux v1.8.1
 	github.com/gorilla/websocket v1.5.3
 	github.com/jackc/pgx v3.6.2+incompatible
Index: ../db_mockup/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>FROM python:alpine3.20\n\nRUN apk add libpq-dev python3-dev gcc musl-dev libc-dev make\n\nCOPY db_mockup/mockdata.json .\n\nCOPY db_mockup/requirements.txt .\n\nRUN python3 -m pip install -r requirements.txt\n\nCMD python --version && cat mockdata.json && cat requirements.txt && python3 -m db_mockdata.main -f mockdata.json
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/Dockerfile b/../db_mockup/Dockerfile
--- a/../db_mockup/Dockerfile	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../db_mockup/Dockerfile	(date 1731874383556)
@@ -2,10 +2,10 @@
 
 RUN apk add libpq-dev python3-dev gcc musl-dev libc-dev make
 
-COPY db_mockup/mockdata.json .
-
 COPY db_mockup/requirements.txt .
 
-RUN python3 -m pip install -r requirements.txt
+RUN python3 -m pip install --default-timeout=240 -r requirements.txt
+
+COPY db_mockup/mockdata.json .
 
 CMD python --version && cat mockdata.json && cat requirements.txt && python3 -m db_mockdata.main -f mockdata.json
\ No newline at end of file
Index: src/main/kotlin/com/jobsearch/jobservice/entities/SkillList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/entities/SkillList.kt b/src/main/kotlin/com/jobsearch/jobservice/entities/SkillList.kt
new file mode 100644
--- /dev/null	(date 1731874376521)
+++ b/src/main/kotlin/com/jobsearch/jobservice/entities/SkillList.kt	(date 1731874376521)
@@ -0,0 +1,20 @@
+//package com.jobsearch.jobservice.entities
+//
+//import io.hypersistence.utils.hibernate.type.json.JsonBinaryType
+//
+//
+//@Entity
+//@Table(name = "student")
+//@TypeDef(name = "jsonb", typeClass = JsonBinaryType::class)
+//class Skil {
+//    @Id
+//    @Column(name = "student_id", length = 8)
+//    private val id: String? = null
+//
+//    @Column(name = "admit_year", length = 4)
+//    private val admitYear: String? = null
+//
+//    @Type(type = "jsonb")
+//    @Column(name = "address", columnDefinition = "jsonb")
+//    private val address: Address? = null // getters and setters
+//}
\ No newline at end of file
Index: ../notification-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Application config\nserver.port=${SERVER_PORT:8082}\nspring.application.name=${SPRING_APPLICATION_NAME:notification-service}\nspring.main.banner-mode=off\n# RabbitMQ\nrabbitmq.exchanges.internal=${RABBITMQ_EXCHANGES_INTERNAL:internal.exchange}\nrabbitmq.queue.email=${RABBITMQ_QUEUE_EMAIL:email.queue}\nrabbitmq.routing-keys.internal-email=${RABBITMQ_ROUTING-KEYS_INTERNAL_EMAIL:internal.email.routing-key}\nspring.rabbitmq.addresses=${SPRING_RABBITMQ_ADDRESSES:172.22.0.1:5672}\n\n# Mail\ngateway.hostname=${GATEWAY_HOSTNAME:34.136.165.221:8080}\nspring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}\nspring.mail.port=${SPRING_MAIL_PORT:587}\nspring.mail.username=${SPRING_MAIL_USERNAME}\nspring.mail.password=${SPRING_MAIL_PASSWORD}\nspring.mail.properties.mail.smtp.auth=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:true}\nspring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:true}\n\n# Eureka\n# eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../notification-service/src/main/resources/application.properties b/../notification-service/src/main/resources/application.properties
--- a/../notification-service/src/main/resources/application.properties	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../notification-service/src/main/resources/application.properties	(date 1731953880357)
@@ -9,7 +9,7 @@
 spring.rabbitmq.addresses=${SPRING_RABBITMQ_ADDRESSES:172.22.0.1:5672}
 
 # Mail
-gateway.hostname=${GATEWAY_HOSTNAME:34.136.165.221:8080}
+gateway.hostname=${GATEWAY_HOSTNAME:localhost:8080}
 spring.mail.host=${SPRING_MAIL_HOST:smtp.gmail.com}
 spring.mail.port=${SPRING_MAIL_PORT:587}
 spring.mail.username=${SPRING_MAIL_USERNAME}
Index: ../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/SecurityConfig.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.apigateway.config\n\nimport org.springframework.cloud.gateway.route.RouteLocator\nimport org.springframework.cloud.gateway.route.builder.GatewayFilterSpec\nimport org.springframework.cloud.gateway.route.builder.PredicateSpec\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.security.config.Customizer\nimport org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity\nimport org.springframework.security.config.web.server.SecurityWebFiltersOrder\nimport org.springframework.security.config.web.server.ServerHttpSecurity\nimport org.springframework.security.web.server.SecurityWebFilterChain\nimport org.springframework.web.cors.CorsConfiguration\nimport org.springframework.web.cors.reactive.CorsConfigurationSource\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource\n\n\n@Configuration\n@EnableWebFluxSecurity\nclass SecurityConfig(\n    private val jwtAuthenticationFilter: JwtAuthenticationFilter\n) {\n    @Bean\n    fun filterChain(http: ServerHttpSecurity): SecurityWebFilterChain {\n        return http\n            .cors(Customizer.withDefaults()) // withDefaults means that it will use CorsConfigurationSource\n            .csrf { it.disable() }\n            .authorizeExchange { exchanges ->\n                exchanges\n                    .anyExchange().permitAll()\n            }\n            .addFilterAt(jwtAuthenticationFilter, SecurityWebFiltersOrder.AUTHENTICATION)\n            .build()\n    }\n\n    @Bean\n    fun customRouteLocator(builder: RouteLocatorBuilder): RouteLocator {\n        return builder.routes()\n            .route { r: PredicateSpec ->\n                r.path(\"/user-service/**\")\n                    .filters { f: GatewayFilterSpec -> f.stripPrefix(1) }\n                    .uri(\"http://172.22.0.1:8081\")  //user service ip\n                    //todo change ip:port to env vars\n            }\n            .build()\n    }\n\n    @Bean\n    fun corsConfigurationSource(): CorsConfigurationSource {\n        val configuration = CorsConfiguration()\n        configuration.allowedOrigins = listOf(\"*\")\n        configuration.allowedMethods = listOf(\"GET\", \"POST\", \"OPTIONS\", \"PUT\", \"DELETE\")\n        configuration.allowedHeaders = listOf(\"*\")\n        val source = UrlBasedCorsConfigurationSource()\n        source.registerCorsConfiguration(\"/**\", configuration)\n        return source\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/SecurityConfig.kt b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/SecurityConfig.kt
--- a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/SecurityConfig.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/SecurityConfig.kt	(date 1731951810612)
@@ -43,6 +43,16 @@
                     .uri("http://172.22.0.1:8081")  //user service ip
                     //todo change ip:port to env vars
             }
+            .route { r: PredicateSpec ->
+                r.path("/chat-service/**")
+                    .filters { f: GatewayFilterSpec -> f.stripPrefix(1) }
+                    .uri("http://172.22.0.1:8088")
+            }
+//            .route { r: PredicateSpec ->
+//                r.path("/chat-service/**")
+//                    .filters { f: GatewayFilterSpec -> f.stripPrefix(1) }
+//                    .uri("ws://172.22.0.1:8088")
+//            }
             .build()
     }
 
Index: ../api-gateway/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=api-gateway\nspring.main.banner-mode=off\n# Spring Cloud Gateway properties\nspring.cloud.gateway.discovery.locator.enabled=true\nspring.cloud.gateway.discovery.locator.lower-case-service-id=true\n#spring.cloud.gateway.routes=\n\n# Server port\nserver.port=8080\n\n# JWT Secret\njwt.secret=${JWT_SECRET}\n#jwt.secret=eriygtf516783e294r876gtewg7h893j49r87g6fe3g7h8jfrgte342\n\n#LOGGING\ndebug_level=DEBUG\nlogging.level.org.springframework.cloud.gateway=${debug_level}\nlogging.level.org.springframework.web=${debug_level}\nlogging.level.org.hibernate=${debug_level}\nlogging.level.graphiql=${debug_level}\nlogging.level.graphql=${debug_level}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../api-gateway/src/main/resources/application.properties b/../api-gateway/src/main/resources/application.properties
--- a/../api-gateway/src/main/resources/application.properties	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../api-gateway/src/main/resources/application.properties	(date 1731874383625)
@@ -9,8 +9,8 @@
 server.port=8080
 
 # JWT Secret
-jwt.secret=${JWT_SECRET}
-#jwt.secret=eriygtf516783e294r876gtewg7h893j49r87g6fe3g7h8jfrgte342
+#jwt.secret=${JWT_SECRET}
+jwt.secret=haQLiNL7wWrAp4o46nsO1HWWbAfjRbp2plpOFMzWoeyKvOqAo8sCSmnNbCJ76wgpdNpPAyklLzgKi3JKNjI0BsQ68H6025aR5kp6rOA2mkou3H4GpcEZC5apasI5h2F0
 
 #LOGGING
 debug_level=DEBUG
Index: ../chat_go/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"sync\"\n\t\"time\"\n\n\t\"chat/services\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/gorilla/websocket\"\n\t\"gorm.io/driver/postgres\"\n\n\t\"gorm.io/gorm\"\n)\n\nconst (\n\twebsocketLifetime = 2 * time.Hour // Time after which we check if the user is still connected, if not then drop connection\n\tmaxIdleDbConnections = 10\n\tmaxOpenDbConnections = 100\n)\n\ntype MetaMessage struct {\n\tOperation    string           `json:\"operation\"`\n\tMessageValue services.Message `json:\"message\"`\n}\n\nvar assignedString string\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\nfunc openDB(dsn string) (*gorm.DB, error) {\n\n\tdb, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tsqlDB, err := db.DB()\n\n\tif err != nil {\n\t\tprint(err)\n\t\treturn nil, err\n\t}\n\tfmt.Println(\"Setting db limits: \")\n\tsqlDB.SetMaxIdleConns(maxIdleDbConnections)\n\tsqlDB.SetMaxOpenConns(maxOpenDbConnections)\n\tlog.Println(\"maxIdleDbConnections\"+ string(maxIdleDbConnections))\n\tlog.Println(\"maxOpenDbConnections\"+ string(maxIdleDbConnections))\n\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\n\terr = sqlDB.PingContext(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn db, nil\n}\n\ntype app struct {\n\tMessageService services.MessageService\n\tConnections    sync.Map\n}\n\nfunc (a *app) GetAllChats(w http.ResponseWriter, r *http.Request) {\n\n\tvar userId string = r.URL.Query().Get(\"userId\")\n\tprintln(\"[DEBUG]234 \" + userId)\n\tdata := a.MessageService.GetAllChats(userId)\n\tif len(data) > 0 {\n        println(\"[DEBUG]2341 \" + data[0].ChatID)\n    } else {\n        println(\"[DEBUG]2342 The user has no chats\")\n    }\n\n\tchatIds := make([]string, len(data))\n\n\n    for iter, chat_struct := range data {\n        chatIds[iter] = chat_struct.ChatID\n    }\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\n\tw.WriteHeader(http.StatusOK)\n\n\tif err := json.NewEncoder(w).Encode(chatIds); err != nil {\n\t\thttp.Error(w, \"Unable to encode JSON\", http.StatusInternalServerError)\n\t\treturn\n\t}\n}\n\nfunc (a *app) StartChat(w http.ResponseWriter, r *http.Request) {\n\n\tvar userId string = r.URL.Query().Get(\"userId\")\n\tvar targetUserId string = r.URL.Query().Get(\"userId\")\n\n\tnewChat := a.MessageService.StartChat(userId, targetUserId)\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\n\tw.WriteHeader(http.StatusOK)\n\n\tif err := json.NewEncoder(w).Encode(newChat); err != nil {\n\t\thttp.Error(w, \"Unable to encode JSON\", http.StatusInternalServerError)\n\t\treturn\n\t}\n}\n\n\nfunc (a *app) HandleWebSocketConn(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\n\tif err != nil {\n\t\tlog.Println(\"Error upgrading to WebSocket:\", err)\n\t\treturn\n\t}\n\n\n    ticker := time.NewTicker(websocketLifetime)\n    defer ticker.Stop()\n\n\tgo func(conn *websocket.Conn) {\n\t\tdefer conn.Close()\n\n\t\t// conn.SetReadDeadline(time.Now().Add(pongWait))\n\t\t// conn.SetPongHandler(func(string) error {\n\t\t// \tconn.SetReadDeadline(time.Now().Add(pongWait))\n\t\t// \treturn nil\n\t\t// })\n\n\t\tticker := time.NewTicker(websocketLifetime)\n\t\tdefer ticker.Stop()\n\n\t\t//establish first message\n\t\t_, msg, err := conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error reading message, closing connection:\", err)\n\t\t\treturn\n\t\t}\n\t\tvar newReceivedMessage MetaMessage\n\t\terr = json.Unmarshal(msg, &newReceivedMessage)\n\t\tif err != nil {\n\t\t\tlog.Println(\"Error while establishig websocket connection\")\n\t\t\tlog.Println(\"Erroneus message: \"+string(msg))\n\t\t\tlog.Println(err)\n\t\t\treturn\n\t\t}\n\t\tvar userId = newReceivedMessage.MessageValue.CreatedBy\n\t\ta.Connections.Swap(userId, &conn)\n\t\tdefer a.Connections.Delete(userId)\n\n\t\t// listen for following messages\n\t\tfor {\n\t\t\t// channels for websocket signals\n\t\t\tmessageChan := make(chan []byte)\n\t\t\terrorChan := make(chan error)\n\n\t\t\t// start a goroutine for websocket read\n\t\t\tgo func() {\n\t\t\t\t_, msg, err := conn.ReadMessage()\n\t\t\t\tif err != nil {\n\t\t\t\t\terrorChan <- err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tmessageChan <- msg\n\t\t\t}()\n\n\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\tlog.Println(\"Websocket timeout reached. Closing the WebSocket connection.\")\n\t\t\t\t\tconn.Close()\n\t\t\t\t\treturn\n\n\t\t\t\tcase msg := <-messageChan:\n\t\t\t\t\tticker.Reset(websocketLifetime)\n\n\t\t\t\t\tvar newReceivedMessage MetaMessage\n\t\t\t\t\terr = json.Unmarshal(msg, &newReceivedMessage)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t// If there's an error parsing JSON, respond with an error message\n\t\t\t\t\t\tlog.Println(\"Error parsing JSON:\", err)\n\t\t\t\t\t\terrorMessage := fmt.Sprintf(\"Error: Invalid JSON format: %v\", err)\n\t\t\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, []byte(errorMessage)); err != nil {\n\t\t\t\t\t\t\tlog.Println(\"Error sending error message:\", err)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process correct message\n\t\t\t\t\t\tlog.Println(\"[DEBUG] code:23\")\n\t\t\t\t\t\tlog.Println(newReceivedMessage.MessageValue.CreatedBy)\n\t\t\t\t\t\tif newReceivedMessage.Operation == \"getAll\" {\n\t\t\t\t\t\t\tvar userId string = newReceivedMessage.MessageValue.CreatedBy\n\t\t\t\t\t\t\t//db query to get chat_id\n\t\t\t\t\t\t\tdata := a.MessageService.GetAllChats(userId)\n\t\t\t\t\t\t\tprintln(\"[DEBUG]6\")\n\t\t\t\t\t\t\tjsonData, _ := json.Marshal(data)\n\t\t\t\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {\n\t\t\t\t\t\t\t\tlog.Println(\"Error sending error message:\", err)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if newReceivedMessage.Operation == \"get\" {\n\t\t\t\t\t\t\t// var chat_id = newReceivedMessage.MessageValue.ChatId\n\t\t\t\t\t\t\t// db query to get chat_id\n\t\t\t\t\t\t\tdata := a.MessageService.GetMessages(newReceivedMessage.MessageValue.ChatId)\n\t\t\t\t\t\t\tlog.Println(\"[DEBUG]5\")\n\t\t\t\t\t\t\tjsonData, _ := json.Marshal(data)\n\t\t\t\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {\n\t\t\t\t\t\t\t\tlog.Println(\"Error sending error message:\", err)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if newReceivedMessage.Operation == \"post\" {\n\t\t\t\t\t\t\t//db query to insert chat message, send msg to all corresponding websockets TODO\n\t\t\t\t\t\t\tdata, _ := a.MessageService.Create(&newReceivedMessage.MessageValue)\n\n\t\t\t\t\t\t\tvar target_users = a.MessageService.GetUsersByChat(newReceivedMessage.MessageValue.ChatId)\n\t\t\t\t\t\t\tprint(\"[DEBUG]943\")\n\t\t\t\t\t\t\tfor _, target_user := range target_users {\n\t\t\t\t\t\t\t\t//send message to each target user\n\t\t\t\t\t\t\t\tretrieved_conn, ok := a.Connections.Load(target_user)\n\t\t\t\t\t\t\t\tif !ok {\n\t\t\t\t\t\t\t\t\tprint(\"no active connection found for conn_id: %s\", target_user)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconn, ok := retrieved_conn.(*websocket.Conn) // type assertion for value any from sync.Map\n\t\t\t\t\t\t\t\tif !ok {\n\t\t\t\t\t\t\t\t\tprint(\"[CRITICAL ERROR] The connection stored in sync.Map is not of type: *websocket.Conn\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tjsonData, err := json.Marshal(newReceivedMessage.MessageValue)\n\t\t\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\t\t\tprint(\"[ERROR] Couldn't parse json for newReceivedMessage.MessageValue\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif err = conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {\n\t\t\t\t\t\t\t\t\tprint(\"[ERROR] Couldn't send message to target, even though connection existed\")\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar msgs []services.Message\n\t\t\t\t\t\t\tmsgs = append(msgs, data)\n\t\t\t\t\t\t\tjsonData, _ := json.Marshal(msgs)\n\t\t\t\t\t\t\tlog.Println(\"[DEBUG]51\")\n\t\t\t\t\t\t\tlog.Println(data)\n\t\t\t\t\t\t\tif err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {\n\t\t\t\t\t\t\t\tlog.Println(\"Error sending error message:\t\", err)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tcase err := <-errorChan:\n\t\t\t\t\t// Error encountered; log and close connection\n\t\t\t\t\tlog.Println(\"Error reading message:\", err)\n\t\t\t\t\tconn.Close()\n\t\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}(conn)\n}\n\nfunc parse_args() string {\n\n\thost := os.Getenv(\"DB_HOST\")\n\tif host == \"\" {\n\t\thost = \"172.22.0.2\"\n\t}\n\n\tuser := os.Getenv(\"DB_USER\")\n\tif user == \"\" {\n\t\tuser = \"admin\"\n\t}\n\n\tpassword := os.Getenv(\"DB_PASSWORD\")\n\tif password == \"\" {\n\t\tpassword = \"test\"\n\t}\n\n\tdbname := os.Getenv(\"DB_NAME\")\n\tif dbname == \"\" {\n\t\tdbname = \"JobMarketDB\"\n\t}\n\n\tport := os.Getenv(\"DB_PORT\")\n\tif port == \"\" {\n\t\tport = \"5432\"\n\t}\n\n\tdsn := flag.String(\"dsn\", fmt.Sprintf(\"host=%s user=%s password=%s dbname=%s port=%s\", host, user, password, dbname, port), \"PostgreSQL DSN\")\n\tflag.Parse()\n\treturn *dsn\n\n}\n\nfunc main() {\n\tvar port string\n\tvar setLimits bool\n\t// flag.StringVar(&dsn, \"dsn\", \"host=172.22.0.2 user=admin password=test dbname=JobMarketDB port=5432\", \"PostgreSQL DSN\")\n\tflag.StringVar(&port, \"port\", \"8088\", \"Service Port\")\n\tflag.BoolVar(&setLimits, \"limits\", false, \"Sets DB limits\")\n\tflag.Parse()\n\tvar dsn = parse_args()\n\tprintln(\"[DEBUG] Starting using dsn: \" + dsn)\n\tdb, err := openDB(dsn)\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\tapplication := app{MessageService: services.NewMessageService(db)}\n\n\t// application := services.NewMessageService(db)\n\n\tr := mux.NewRouter()\n\n\tuserRouter := r.PathPrefix(\"\").Subrouter()\n\t// userRouter.HandleFunc(\"/ws_old\", handleWebSocket)\n\tuserRouter.HandleFunc(\"/ws\", application.HandleWebSocketConn)\n\tuserRouter.HandleFunc(\"/getUserChats\", application.GetAllChats)\n\tuserRouter.HandleFunc(\"/startChat\", application.StartChat)\n\t// userRouter.HandleFunc(\"/post\", application.CreateMessage).Methods(http.MethodPost)\n\t// http.Handle(\"/messages/post\", r)\n\t//userRouter.HandleFunc(\"\", application.AddUser).Methods(http.MethodPost)\n\thttp.Handle(\"/\", r)\n\n\tfmt.Println(\"WebSocket server started on :\" + port + \" on /ws endpoint\")\n\tif err := http.ListenAndServe(\":\"+port, nil); err != nil {\n\t\tlog.Fatal(\"ListenAndServe:\", err)\n\t}\n}\n\n/// TODO change all println to log.something, for better logging (adds datetime, by default)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../chat_go/main.go b/../chat_go/main.go
--- a/../chat_go/main.go	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../chat_go/main.go	(date 1731874383647)
@@ -18,10 +18,11 @@
 	"gorm.io/driver/postgres"
 
 	"gorm.io/gorm"
+	"reflect"
 )
 
 const (
-	websocketLifetime = 2 * time.Hour // Time after which we check if the user is still connected, if not then drop connection
+	websocketLifetime    = 2 * time.Hour // Time after which we check if the user is still connected, if not then drop connection
 	maxIdleDbConnections = 10
 	maxOpenDbConnections = 100
 )
@@ -31,8 +32,6 @@
 	MessageValue services.Message `json:"message"`
 }
 
-var assignedString string
-
 var upgrader = websocket.Upgrader{
 	ReadBufferSize:  1024,
 	WriteBufferSize: 1024,
@@ -56,8 +55,8 @@
 	fmt.Println("Setting db limits: ")
 	sqlDB.SetMaxIdleConns(maxIdleDbConnections)
 	sqlDB.SetMaxOpenConns(maxOpenDbConnections)
-	log.Println("maxIdleDbConnections"+ string(maxIdleDbConnections))
-	log.Println("maxOpenDbConnections"+ string(maxIdleDbConnections))
+	log.Println("maxIdleDbConnections" + string(maxIdleDbConnections))
+	log.Println("maxOpenDbConnections" + string(maxIdleDbConnections))
 
 	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
 	defer cancel()
@@ -81,17 +80,16 @@
 	println("[DEBUG]234 " + userId)
 	data := a.MessageService.GetAllChats(userId)
 	if len(data) > 0 {
-        println("[DEBUG]2341 " + data[0].ChatID)
-    } else {
-        println("[DEBUG]2342 The user has no chats")
-    }
+		println("[DEBUG]2341 " + data[0].ChatID)
+	} else {
+		println("[DEBUG]2342 The user has no chats")
+	}
 
 	chatIds := make([]string, len(data))
 
-
-    for iter, chat_struct := range data {
-        chatIds[iter] = chat_struct.ChatID
-    }
+	for iter, chat_struct := range data {
+		chatIds[iter] = chat_struct.ChatID
+	}
 
 	w.Header().Set("Content-Type", "application/json")
 
@@ -120,7 +118,6 @@
 	}
 }
 
-
 func (a *app) HandleWebSocketConn(w http.ResponseWriter, r *http.Request) {
 	conn, err := upgrader.Upgrade(w, r, nil)
 
@@ -129,19 +126,12 @@
 		return
 	}
 
-
-    ticker := time.NewTicker(websocketLifetime)
-    defer ticker.Stop()
+	ticker := time.NewTicker(websocketLifetime)
+	defer ticker.Stop()
 
 	go func(conn *websocket.Conn) {
 		defer conn.Close()
 
-		// conn.SetReadDeadline(time.Now().Add(pongWait))
-		// conn.SetPongHandler(func(string) error {
-		// 	conn.SetReadDeadline(time.Now().Add(pongWait))
-		// 	return nil
-		// })
-
 		ticker := time.NewTicker(websocketLifetime)
 		defer ticker.Stop()
 
@@ -151,20 +141,46 @@
 			log.Println("Error reading message, closing connection:", err)
 			return
 		}
+		log.Println("[DEBUG]0192")
+		log.Println(msg)
 		var newReceivedMessage MetaMessage
 		err = json.Unmarshal(msg, &newReceivedMessage)
 		if err != nil {
 			log.Println("Error while establishig websocket connection")
-			log.Println("Erroneus message: "+string(msg))
+			log.Println("Erroneus message: " + string(msg))
 			log.Println(err)
 			return
 		}
 		var userId = newReceivedMessage.MessageValue.CreatedBy
-		a.Connections.Swap(userId, &conn)
-		defer a.Connections.Delete(userId)
+		log.Println("[DEBUG]2222")
+		log.Println(newReceivedMessage.MessageValue)
+		a.Connections.Store(userId, conn)
+		log.Println("[DEBUG]7127")
+		log.Println(a)
+		a.Connections.Range(func(key, value interface{}) bool {
+			// Perform type assertions based on expected types
+			// Adjust the types below according to your actual key and value types
+			switch k := key.(type) {
+			case string:
+				switch v := value.(type) {
+				case websocket.Conn:
+					fmt.Printf("Key: %s, Value: %d\n", k, v)
+				case string:
+					fmt.Printf("Key: %s, Value: %s\n", k, v)
+				default :
+					fmt.Printf("Key: %s, Value of unknown type\n", k)
+				}
+			default:
+				fmt.Printf("Key of unknown type, Value: %v\n", value)
+			}
+			return true // Continue iteration
+		})
 
+		log.Println(a.Connections.Load(userId))
 		// listen for following messages
 		for {
+			log.Println("[DEBUG]7129")
+			log.Println(a.Connections.Load(userId))
 			// channels for websocket signals
 			messageChan := make(chan []byte)
 			errorChan := make(chan error)
@@ -180,61 +196,93 @@
 			}()
 
 			select {
-				case <-ticker.C:
-					log.Println("Websocket timeout reached. Closing the WebSocket connection.")
-					conn.Close()
-					return
+			case <-ticker.C:
+				log.Println("Websocket timeout reached. Closing the WebSocket connection.")
+				conn.Close()
+				return
 
-				case msg := <-messageChan:
-					ticker.Reset(websocketLifetime)
+			case msg := <-messageChan:
+				ticker.Reset(websocketLifetime)
 
-					var newReceivedMessage MetaMessage
-					err = json.Unmarshal(msg, &newReceivedMessage)
-					if err != nil {
-						// If there's an error parsing JSON, respond with an error message
-						log.Println("Error parsing JSON:", err)
-						errorMessage := fmt.Sprintf("Error: Invalid JSON format: %v", err)
-						if err := conn.WriteMessage(websocket.TextMessage, []byte(errorMessage)); err != nil {
-							log.Println("Error sending error message:", err)
-						}
-						continue
-					} else {
-						// process correct message
-						log.Println("[DEBUG] code:23")
-						log.Println(newReceivedMessage.MessageValue.CreatedBy)
-						if newReceivedMessage.Operation == "getAll" {
-							var userId string = newReceivedMessage.MessageValue.CreatedBy
-							//db query to get chat_id
-							data := a.MessageService.GetAllChats(userId)
-							println("[DEBUG]6")
-							jsonData, _ := json.Marshal(data)
-							if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
-								log.Println("Error sending error message:", err)
-							}
+				var newReceivedMessage MetaMessage
+				err = json.Unmarshal(msg, &newReceivedMessage)
+				if err != nil {
+					// If there's an error parsing JSON, respond with an error message
+					log.Println("Error parsing JSON:", err)
+					errorMessage := fmt.Sprintf("Error: Invalid JSON format: %v", err)
+					if err := conn.WriteMessage(websocket.TextMessage, []byte(errorMessage)); err != nil {
+						log.Println("Error sending error message:", err)
+					}
+					continue
+				} else {
+					// process correct message
+					log.Println("[DEBUG] code:23")
+					log.Println(newReceivedMessage.MessageValue.CreatedBy)
+					if newReceivedMessage.Operation == "getAll" {
+						var userId string = newReceivedMessage.MessageValue.CreatedBy
+						//db query to get chat_id
+						data := a.MessageService.GetAllChats(userId)
+						println("[DEBUG]6")
+						jsonData, _ := json.Marshal(data)
+						if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
+							log.Println("Error sending error message:", err)
+						}
 
-						} else if newReceivedMessage.Operation == "get" {
-							// var chat_id = newReceivedMessage.MessageValue.ChatId
-							// db query to get chat_id
-							data := a.MessageService.GetMessages(newReceivedMessage.MessageValue.ChatId)
-							log.Println("[DEBUG]5")
-							jsonData, _ := json.Marshal(data)
-							if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
-								log.Println("Error sending error message:", err)
-							}
+					} else if newReceivedMessage.Operation == "get" {
+						// var chat_id = newReceivedMessage.MessageValue.ChatId
+						// db query to get chat_id
+						data := a.MessageService.GetMessages(newReceivedMessage.MessageValue.ChatId)
+						log.Println("[DEBUG]5")
+						jsonData, _ := json.Marshal(data)
+						if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
+							log.Println("Error sending error message:", err)
+						}
 
-						} else if newReceivedMessage.Operation == "post" {
-							//db query to insert chat message, send msg to all corresponding websockets TODO
-							data, _ := a.MessageService.Create(&newReceivedMessage.MessageValue)
+					} else if newReceivedMessage.Operation == "post" {
+						//db query to insert chat message, send msg to all corresponding websockets TODO
+						data, _ := a.MessageService.Create(&newReceivedMessage.MessageValue)
 
-							var target_users = a.MessageService.GetUsersByChat(newReceivedMessage.MessageValue.ChatId)
-							print("[DEBUG]943")
-							for _, target_user := range target_users {
-								//send message to each target user
-								retrieved_conn, ok := a.Connections.Load(target_user)
-								if !ok {
-									print("no active connection found for conn_id: %s", target_user)
-								}
+						var target_users = a.MessageService.GetUsersByChat(newReceivedMessage.MessageValue.ChatId)
+						log.Println("[DEBUG]943")
+						log.Println(target_users)
+						log.Println("[DEBUG]71210")
+						log.Println(a.Connections.Load(userId))
+						for _, target_user := range target_users {
+
+
+							a.Connections.Range(func(key, value interface{}) bool {
+								// Perform type assertions based on expected types
+								// Adjust the types below according to your actual key and value types
+								switch k := key.(type) {
+								case string:
+									switch v := value.(type) {
+									case websocket.Conn:
+										fmt.Printf("Key: %s, Value: %d\n", k, v)
+									case string:
+										fmt.Printf("Key: %s, Value: %s\n", k, v)
+									default :
+										fmt.Printf("Key: %s, Value of unknown type\n", k)
+									}
+								default:
+									fmt.Printf("Key of unknown type, Value: %v\n", value)
+								}
+								return true // Continue iteration
+							})
+
+							//send message to each target user
+							log.Println("[DEBUG]739")
+							log.Println(target_user)
+							retrieved_conn, ok := a.Connections.Load(target_user)
+							log.Println("[DEBUG]73")
+							log.Println(retrieved_conn)
+							log.Println(userId)
+							log.Println(ok)
+
+							if !ok || userId == target_user {
+								print("no active connection found for conn_id: %s", target_user)
+							}else{
 								conn, ok := retrieved_conn.(*websocket.Conn) // type assertion for value any from sync.Map
+								log.Println(reflect.TypeOf(retrieved_conn))
 								if !ok {
 									print("[CRITICAL ERROR] The connection stored in sync.Map is not of type: *websocket.Conn")
 								}
@@ -242,27 +290,31 @@
 								if err != nil {
 									print("[ERROR] Couldn't parse json for newReceivedMessage.MessageValue")
 								}
-								if err = conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
+								if err = (*conn).WriteMessage(websocket.TextMessage, jsonData); err != nil {
 									print("[ERROR] Couldn't send message to target, even though connection existed")
+								}else{
+									log.Println("SUCCESSFULLY SEND MESSAGE")
+								}
+							}
 
-								}
+							log.Println("[DEBUG]09")
 
-							}
-							var msgs []services.Message
-							msgs = append(msgs, data)
-							jsonData, _ := json.Marshal(msgs)
-							log.Println("[DEBUG]51")
-							log.Println(data)
-							if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
-								log.Println("Error sending error message:	", err)
-							}
-						}
-					}
-				case err := <-errorChan:
-					// Error encountered; log and close connection
-					log.Println("Error reading message:", err)
-					conn.Close()
-					return
+						}
+						var msgs []services.Message
+						msgs = append(msgs, data)
+						jsonData, _ := json.Marshal(msgs)
+						log.Println("[DEBUG]51")
+						log.Println(data)
+						if err := conn.WriteMessage(websocket.TextMessage, jsonData); err != nil {
+							log.Println("Error sending error message:	", err)
+						}
+					}
+				}
+			case err := <-errorChan:
+				// Error encountered; log and close connection
+				log.Println("Error reading message:", err)
+				conn.Close()
+				return
 			}
 		}
 	}(conn)
@@ -272,7 +324,7 @@
 
 	host := os.Getenv("DB_HOST")
 	if host == "" {
-		host = "172.22.0.2"
+		host = "172.22.0.1"
 	}
 
 	user := os.Getenv("DB_USER")
@@ -298,7 +350,6 @@
 	dsn := flag.String("dsn", fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s", host, user, password, dbname, port), "PostgreSQL DSN")
 	flag.Parse()
 	return *dsn
-
 }
 
 func main() {
@@ -315,9 +366,27 @@
 		log.Fatalln(err)
 	}
 	application := app{MessageService: services.NewMessageService(db)}
-
-	// application := services.NewMessageService(db)
-
+	application.Connections.Store("key1", "value1")
+    application.Connections.Store("key2", "value2")
+	application.Connections.Range(func(key, value interface{}) bool {
+		// Perform type assertions based on expected types
+		// Adjust the types below according to your actual key and value types
+		switch k := key.(type) {
+		case string:
+			switch v := value.(type) {
+			case websocket.Conn:
+				fmt.Printf("Key: %s, Value: %d\n", k, v)
+			case string:
+				fmt.Printf("Key: %s, Value: %s\n", k, v)
+			default :
+				fmt.Printf("Key: %s, Value of unknown type\n", k)
+			}
+		default:
+			fmt.Printf("Key of unknown type, Value: %v\n", value)
+		}
+		return true // Continue iteration
+	})
+	log.Println(application.Connections)
 	r := mux.NewRouter()
 
 	userRouter := r.PathPrefix("").Subrouter()
Index: ../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.apigateway.config\n\nimport org.springframework.util.AntPathMatcher\n\nenum class PublicEndpoint(val pattern: String) {\n    PUBLIC(\"/public\"),\n    LOGIN(\"/user-service/login\"),\n    REGISTER(\"/user-service/register/**\"),\n    VERIFICATION(\"/user-service/verification/**\"),\n    TOKEN(\"/user-service/token/**\"),\n    RESET_PASSWORD(\"/user-service/resetPassword\"),\n    UPDATE_PASSWORD(\"/user-service/updatePassword\"),\n    ERROR(\"/user-service/error\");\n\n\n\n    companion object {\n        private val pathMatcher = AntPathMatcher()\n\n        fun isPublicPath(path: String): Boolean {\n            return entries.any { endpoint ->\n                pathMatcher.match(endpoint.pattern, path)\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt
--- a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt	(date 1731874383670)
@@ -11,6 +11,7 @@
     RESET_PASSWORD("/user-service/resetPassword"),
     UPDATE_PASSWORD("/user-service/updatePassword"),
     ERROR("/user-service/error");
+//    CHAT_TESTING("/chat-service/**");
 
 
 
Index: ../chat_go/services/message_service.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package services\n\nimport (\n\t\"context\"\n\t// \"encoding/json\"\n\t\"time\"\n\n\t\"gorm.io/gorm\"\n)\n\ntype DbMessageService struct {\n\tdb *gorm.DB\n}\n\nfunc NewMessageService(db *gorm.DB) *DbMessageService {\n\treturn &DbMessageService{db: db}\n}\n\ntype MessageService interface {\n\t// Get(id string) (*app_users, error)\n\t// Delete(id string) error\n\t// DeleteAll() error\n\t// Update(user *User) error\n\tGetMessages(chatId string) ([]Message)\n\tCreate(message *Message) (Message, error)\n\tGetAllChats(userId string) ([]user_chats)\n\tGetUsersByChat(chatId string) ([]string)\n\tStartChat(creatorId string, targetId string) (chatId string)\n}\n\ntype Message struct {\n\t\n\tMessageId string    `json:\"id\" gorm:\"primaryKey;type:uuid;default:gen_random_uuid()\"`\n\tChatId    string    `json:\"chatId\" gorm:\"references:Chat;type:uuid\"`\n\tContent   string `json:\"content\"`\n\n\tCreatedBy string `json:\"createdBy\" gorm:\"references:app_users;type:uuid\"`\n\tCreatedByDisplay string `json:\"createdByDisplay\"`\n\tReadBy    string `json:\"readBy\" gorm:\"references:app_users\"`\n\tDeletedBy string `json:\"deletedBy\" gorm:\"references:app_users\"`\n\n\tCreatedAt time.Time `json:\"createdAt\"`\n\tUpdatedAt time.Time `json:\"updatedAt\"`\n}\n\ntype app_users struct {\n\tUserID           string    `json:\"user_id\" gorm:\"primaryKey;type:uuid;default:gen_random_uuid()\"`\n\tCompanyID        string    `json:\"company_id\" gorm:\"references:Company;type:uuid\"`\n\tEmail            string    `json:\"email\" gorm:\"unique\"`\n\tFirstName        string    `json:\"first_name\"`\n\tLastName         string    `json:\"last_name\"`\n\tPhone            string    `json:\"phone\"`\n\tRole             string    `json:\"role\"`\n\tIsBlocked        bool      `json:\"is_blocked\"`\n\tEmailVerified    bool      `json:\"email_verified\"`\n\tEmployeeVerified bool      `json:\"employee_verified\"`\n\tCreatedAt        time.Time `json:\"created_at\"`\n\tPasswordHash     string    `json:\"password_hash\"`\n}\n\ntype user_chats struct {\n\tUserID           string    `json:\"user_id\" gorm:\"primaryKey;type:uuid;default:gen_random_uuid();references:app_users\"`\n\tChatID           string    `json:\"chat_id\" gorm:\"primaryKey;type:uuid;default:gen_random_uuid();\"`\n}\n\ntype Chat struct {\n\n\tChatId\t\t\tstring \t\t`json:\"chatId\" gorm:\"PrimaryKey;type:uuid;default:gen_random_uuid()\"`\n\tCreatedBy\t\tstring \t`json:\"createdBy\" gorm:\"PrimaryKey;type:uuid;references:app_users\"`\n\n\n\t// \"chats\": {\n\t// \t\"chat_id\": \"PK UUID\",\n\t// \t\"name\": \"first_name\",\n\t// \t\"created_by\": \"first_name\",\n\t// \t\"deleted_by\": \"first_name\",\n\t// \t\"last_message\": \"first_name\",\n\t// \t\"tags\": \"first_name\",\n\t// \t\"created_at\": \"timestamp\",\n\t// \t\"updated_at\": \"timestamp\"\n\t//   },\n}\n\n\nfunc (p *DbMessageService) Create(message *Message) (Message, error) {\n\t_, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\t\n\tresult := p.db.Table(\"chat_messages\").Create(&message)\n\n\treturn *message, result.Error\n}\n\n\nfunc (p *DbMessageService) GetUsersByChat(chatId string) ([]string) {\n\t_, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\tvar user_chats []user_chats\n\tp.db.Table(\"user_chats\").Create(&user_chats)\n\n\t// process userchats\n    userIDs := make([]string, len(user_chats))\n    for i, chat := range user_chats {\n        userIDs[i] = chat.ChatID\n    }\n\treturn userIDs\n\n}\n\n\nfunc (p *DbMessageService) StartChat(creatorId string, targetId string) (chatId string) {\n\t_, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\n\t//todo add error handling later on, sHoUlD never happend\n\tnewChat := Chat{\n\t\tChatId: \"\",\n\t\tCreatedBy: creatorId,\n\t}\n\tp.db.Table(\"chats\").Create(&newChat)\n\n    creatorChat := user_chats{\n        UserID: creatorId,\n        ChatID: newChat.ChatId,\n    }\n\tp.db.Table(\"user_chats\").Create(&creatorChat)\n\n    targetChat := user_chats{\n        UserID: creatorId,\n        ChatID: newChat.ChatId,\n    }\n\tp.db.Table(\"user_chats\").Create(&targetChat)\n\n\treturn newChat.ChatId\n\n}\n\nfunc (p *DbMessageService) GetMessages(chatId string) (rows []Message) {\n\t_, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\n\t// safe, will be escaped\n\tvar results []Message\n\tp.db.Table(\"chat_messages\").Where(\"chat_id = ?\", chatId).Find(&results)\n\tprintln(\"[DEBUG]4\")\n\treturn results\n}\n\n\nfunc (p *DbMessageService) GetAllChats(userId string) (chats []user_chats) {\n\t_, cancel := context.WithTimeout(context.Background(), 15*time.Second)\n\tdefer cancel()\n\n\t// safe, will be escaped\n\tvar results []user_chats\n\tp.db.Table(\"user_chats\").Where(\"user_id = ?\", userId).Find(&results)\n\tprintln(\"[DEBUG]48\")\n\n    // Extract only the ChatID values into a new slice\n\n\t// println(\"[DEBUG]65 \"+chatIDs[0])\n\treturn results\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../chat_go/services/message_service.go b/../chat_go/services/message_service.go
--- a/../chat_go/services/message_service.go	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../chat_go/services/message_service.go	(date 1731874383691)
@@ -2,9 +2,11 @@
 
 import (
 	"context"
+	"log"
 	// "encoding/json"
 	"time"
 
+	"github.com/google/uuid"
 	"gorm.io/gorm"
 )
 
@@ -35,7 +37,7 @@
 	Content   string `json:"content"`
 
 	CreatedBy string `json:"createdBy" gorm:"references:app_users;type:uuid"`
-	CreatedByDisplay string `json:"createdByDisplay"`
+	CreatedByDisplay string `json:"createdByDisplay" gorm:"type:string"`
 	ReadBy    string `json:"readBy" gorm:"references:app_users"`
 	DeletedBy string `json:"deletedBy" gorm:"references:app_users"`
 
@@ -83,9 +85,11 @@
 
 
 func (p *DbMessageService) Create(message *Message) (Message, error) {
-	_, cancel := context.WithTimeout(context.Background(), 15*time.Second)
+	_, cancel := context.WithTimeout(context.Background(), 60*time.Second)
 	defer cancel()
-	
+	message.MessageId = uuid.New().String()
+	log.Print("[DEBUG]752:")
+	log.Println(message.CreatedByDisplay)
 	result := p.db.Table("chat_messages").Create(&message)
 
 	return *message, result.Error
@@ -93,15 +97,16 @@
 
 
 func (p *DbMessageService) GetUsersByChat(chatId string) ([]string) {
-	_, cancel := context.WithTimeout(context.Background(), 15*time.Second)
+	_, cancel := context.WithTimeout(context.Background(), 60*time.Second)
 	defer cancel()
 	var user_chats []user_chats
-	p.db.Table("user_chats").Create(&user_chats)
-
+	// p.db.Table("user_chats").Create(&user_chats)
+	p.db.Table("user_chats").Where("chat_id = ?", chatId).Find(&user_chats)
+	log.Println("[DEBUG]9")
 	// process userchats
     userIDs := make([]string, len(user_chats))
     for i, chat := range user_chats {
-        userIDs[i] = chat.ChatID
+        userIDs[i] = chat.UserID
     }
 	return userIDs
 
@@ -109,7 +114,7 @@
 
 
 func (p *DbMessageService) StartChat(creatorId string, targetId string) (chatId string) {
-	_, cancel := context.WithTimeout(context.Background(), 15*time.Second)
+	_, cancel := context.WithTimeout(context.Background(), 60*time.Second)
 	defer cancel()
 
 	//todo add error handling later on, sHoUlD never happend
@@ -136,7 +141,7 @@
 }
 
 func (p *DbMessageService) GetMessages(chatId string) (rows []Message) {
-	_, cancel := context.WithTimeout(context.Background(), 15*time.Second)
+	_, cancel := context.WithTimeout(context.Background(), 60*time.Second)
 	defer cancel()
 
 	// safe, will be escaped
@@ -148,7 +153,7 @@
 
 
 func (p *DbMessageService) GetAllChats(userId string) (chats []user_chats) {
-	_, cancel := context.WithTimeout(context.Background(), 15*time.Second)
+	_, cancel := context.WithTimeout(context.Background(), 60*time.Second)
 	defer cancel()
 
 	// safe, will be escaped
Index: src/main/kotlin/com/jobsearch/jobservice/repositories/JobRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.repositories\n\nimport com.jobsearch.jobservice.entities.Job\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable\nimport org.springframework.data.jpa.repository.JpaRepository\nimport org.springframework.data.jpa.repository.JpaSpecificationExecutor\nimport org.springframework.stereotype.Repository\nimport java.util.*\n\n@Repository\ninterface JobRepository: JpaRepository<Job, UUID>, JpaSpecificationExecutor<Job> {\n    fun findJobByJobIdAndIsDeletedFalse(jobId: UUID): Job?\n    fun findJobsByRecruiterId(recruiterId: UUID): List<Job>\n    fun findJobsByCompanyIdAndIsDeletedFalse(companyId: UUID): List<Job>\n    fun findAllByIsDeletedFalse(pageable: Pageable): Page<Job>\n    fun findJobByJobId(jobId: UUID): Job?\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/repositories/JobRepository.kt b/src/main/kotlin/com/jobsearch/jobservice/repositories/JobRepository.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/repositories/JobRepository.kt	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/src/main/kotlin/com/jobsearch/jobservice/repositories/JobRepository.kt	(date 1731874376504)
@@ -10,6 +10,8 @@
 
 @Repository
 interface JobRepository: JpaRepository<Job, UUID>, JpaSpecificationExecutor<Job> {
+
+
     fun findJobByJobIdAndIsDeletedFalse(jobId: UUID): Job?
     fun findJobsByRecruiterId(recruiterId: UUID): List<Job>
     fun findJobsByCompanyIdAndIsDeletedFalse(companyId: UUID): List<Job>
Index: ../db/db_init/init.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db/db_init/init.sql b/../db/db_init/init.sql
--- a/../db/db_init/init.sql	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../db/db_init/init.sql	(date 1731874383713)
@@ -1,1 +1,2 @@
 CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
+CREATE EXTENSION IF NOT EXISTS "pgcrypto";
\ No newline at end of file
Index: ../chat_go/go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=\ngithub.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a h1:bbPeKD0xmW/Y25WS6cokEszi5g+S0QxI/d45PkRi7Nk=\ngithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\ngithub.com/jackc/pgx v3.6.2+incompatible h1:2zP5OD7kiyR3xzRYMhOcXVvkDZsImVXfj+yIyTQf3/o=\ngithub.com/jackc/pgx v3.6.2+incompatible/go.mod h1:0ZGrqGqkRlliWnWB4zKnWtjbSWbGkVEFm4TeybAXq+I=\ngithub.com/jackc/pgx/v5 v5.5.5 h1:amBjrZVmksIdNjxGW/IiIMzxMKZFelXbUoPNb+8sjQw=\ngithub.com/jackc/pgx/v5 v5.5.5/go.mod h1:ez9gk+OAat140fv9ErkZDYFWmXLfV+++K0uAOiwgm1A=\ngithub.com/jackc/puddle/v2 v2.2.1 h1:RhxXJtFG022u4ibrCSMSiu5aOq1i77R3OHKNJj77OAk=\ngithub.com/jackc/puddle/v2 v2.2.1/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\ngithub.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=\ngithub.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngolang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=\ngolang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=\ngolang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngorm.io/driver/postgres v1.5.9 h1:DkegyItji119OlcaLjqN11kHoUgZ/j13E0jkJZgD6A8=\ngorm.io/driver/postgres v1.5.9/go.mod h1:DX3GReXH+3FPWGrrgffdvCk3DQ1dwDPdmbenSkweRGI=\ngorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=\ngorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../chat_go/go.sum b/../chat_go/go.sum
--- a/../chat_go/go.sum	(revision 7260942302b83373898e9e3e773ac3708909bcd3)
+++ b/../chat_go/go.sum	(date 1731874383736)
@@ -1,4 +1,6 @@
 github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/gorilla/mux v1.8.1 h1:TuBL49tXwgrFYWhqrNgrUNEY92u81SPhu7sTdzQEiWY=
 github.com/gorilla/mux v1.8.1/go.mod h1:AKf9I4AEqPTmMytcMc0KkNouC66V3BtZ4qD5fmWSiMQ=
 github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
