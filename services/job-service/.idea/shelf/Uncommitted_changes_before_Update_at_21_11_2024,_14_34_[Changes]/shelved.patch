Index: src/main/kotlin/com/jobsearch/jobservice/services/JobServiceImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.services\n\nimport com.jobsearch.jobservice.entities.FollowedJobs\nimport com.jobsearch.jobservice.entities.Job\nimport com.jobsearch.jobservice.entities.specifications.JobSpecifications\nimport com.jobsearch.jobservice.exceptions.JobNotFoundException\nimport com.jobsearch.jobservice.repositories.FollowedJobRepository\nimport com.jobsearch.jobservice.repositories.JobRepository\nimport com.jobsearch.jobservice.requests.JobFilterRequest\nimport com.jobsearch.jobservice.requests.JobRequest\nimport com.jobsearch.jobservice.responses.DeleteJobResponse\nimport com.jobsearch.jobservice.responses.FollowJobResponse\nimport com.jobsearch.jobservice.responses.JobResponse\nimport jakarta.transaction.Transactional\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.Pageable\nimport org.springframework.data.jpa.domain.Specification\nimport org.springframework.security.core.context.SecurityContextHolder\nimport org.springframework.stereotype.Service\nimport java.util.*\n\n@Service\nclass JobServiceImpl(\n    private val jobRepository: JobRepository,\n    private val followedJobRepository: FollowedJobRepository,\n    private val quizService: QuizService,\n    private val userServiceUtils: UserServiceUtils,\n    private val viewedJobService: ViewedJobService\n): JobService {\n\n    override fun createJob(jobRequest: JobRequest): JobResponse {\n        val companyId = userServiceUtils.getRecruiterCompany()\n\n        val job = mapRequestToJob(jobRequest, companyId, getRecruiterId())\n        val savedJob = jobRepository.save(job)\n        return mapJobToResponse(savedJob)\n    }\n\n    override fun deleteJobById(jobId: UUID): DeleteJobResponse {\n        return try {\n            val job = getJobEntityById(jobId)\n\n            if (job.isDeleted) {\n                return DeleteJobResponse(success = false, message = \"Job is already deleted\")\n            }\n\n            job.isDeleted = true\n            jobRepository.save(job)\n            DeleteJobResponse(success = true, message = \"Job deleted\")\n        } catch (e: JobNotFoundException) {\n            DeleteJobResponse(success = false, message = \"Job not found\")\n        } catch (e: Exception) {\n            DeleteJobResponse(success = false, message = e.message ?: \"An unexpected error occurred\")\n        }\n    }\n\n    override fun updateJobById(jobId: UUID, jobRequest: JobRequest): JobResponse {\n        val existingJob = jobRepository.findById(jobId)\n        if (existingJob.isEmpty) {\n            throw JobNotFoundException(jobId)\n        }\n        val updatedJob = jobRepository.save(mapRequestToJob(jobRequest, userServiceUtils.getRecruiterCompany(), getRecruiterId(), jobId = jobId))\n        return mapJobToResponse(updatedJob)    }\n\n    override fun getJobsByRecruiter(recruiterId: UUID): List<JobResponse> {\n        return jobRepository.findJobsByRecruiterId(recruiterId).map { mapJobToResponse(it) }\n    }\n\n    override fun getJobEntityById(jobId: UUID): Job {\n        return jobRepository.findJobByJobId(jobId) ?: throw JobNotFoundException(jobId)\n    }\n\n    override fun getJobById(jobId: UUID): JobResponse {\n        return mapJobToResponse(getJobEntityById(jobId))\n    }\n\n    override fun getJobByIdAndDeleteFalse(userId: UUID?, jobId: UUID): JobResponse {\n        val job = jobRepository.findJobByJobIdAndIsDeletedFalse(jobId) ?: throw JobNotFoundException(jobId)\n        if(userId != null){\n            viewedJobService.viewJob(userId, jobId)\n        }\n        return mapJobToResponse(job)\n    }\n\n    override fun getFilteredJobs(filter: JobFilterRequest?, pageable: Pageable): Page<JobResponse> {\n        val specification: Specification<Job>? = filter?.let { JobSpecifications.getJobsByFilter(it) }\n        return jobRepository.findAll(specification, pageable).map { mapJobToResponse(it) }\n    }\n\n    override fun restoreJobById(jobId: UUID): JobResponse {\n        val job = getJobEntityById(jobId)\n        val restoredJob = jobRepository.save(job)\n        return mapJobToResponse(restoredJob)\n    }\n\n    @Transactional\n    override fun toggleFollowJob(jobId: UUID, userId: UUID): FollowJobResponse {\n        val job = getJobEntityById(jobId)\n\n        val isFollowed = followedJobRepository.existsByUserIdAndJobId(userId, jobId)\n\n        if (isFollowed) {\n            followedJobRepository.deleteByUserIdAndJobId(userId, jobId)\n            return FollowJobResponse(\n                success = true,\n                message = \"Job successfully unfollowed.\",\n                isFollowed = false\n            )\n        } else {\n            followedJobRepository.save(FollowedJobs(userId = userId, jobId = jobId, job = job))\n            return FollowJobResponse(\n                success = true,\n                message = \"Job successfully followed.\",\n                isFollowed = true\n            )\n        }\n    }\n\n    override fun getFollowedFilteredJobs(userId: UUID): List<JobResponse> {\n        return followedJobRepository.findByUserId(userId).map { mapJobToResponse(it.job!!) }\n    }\n\n    override fun getJobsByCompany(companyId: UUID): List<JobResponse> {\n        return jobRepository.findJobsByCompanyIdAndIsDeletedFalse(companyId).map { mapJobToResponse(it) }\n    }\n\n    private fun mapRequestToJob(jobRequest: JobRequest, companyId: UUID, recruiterId: UUID, jobId: UUID? = null): Job {\n        return Job(\n            jobId = jobId,\n            recruiterId = recruiterId,\n            companyId = companyId,\n            title = jobRequest.title,\n            description = jobRequest.description,\n            location = jobRequest.location,\n            employmentType = jobRequest.employmentType,\n            workLocation = jobRequest.workLocation,\n            salary = jobRequest.salary,\n            requiredSkills = jobRequest.requiredSkills,\n            requiredExperience = jobRequest.requiredExperience,\n            quiz = jobRequest.quizId?.let { quizService.findQuizEntityById(it) },\n        )\n    }\n\n    private fun mapJobToResponse(job: Job): JobResponse {\n        return JobResponse(\n            jobId = job.jobId ?: throw IllegalArgumentException(\"Job ID cannot be null\"),\n            recruiterId = job.recruiterId,\n            companyId = job.companyId,\n            title = job.title,\n            description = job.description,\n            location = job.location,\n            employmentType = job.employmentType,\n            workLocation = job.workLocation,\n            salary = job.salary,\n            requiredSkills = job.requiredSkills,\n            requiredExperience = job.requiredExperience,\n            createdAt = job.createdAt,\n            updatedAt = job.updatedAt,\n            isDeleted = job.isDeleted,\n            quizId = job.quiz?.quizId,\n            companyName = userServiceUtils.getCompanyName(job.companyId)\n        )\n    }\n\n    private fun getRecruiterId(): UUID{\n        val authentication = SecurityContextHolder.getContext().authentication\n        return UUID.fromString(authentication.name)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/services/JobServiceImpl.kt b/src/main/kotlin/com/jobsearch/jobservice/services/JobServiceImpl.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/services/JobServiceImpl.kt	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/src/main/kotlin/com/jobsearch/jobservice/services/JobServiceImpl.kt	(date 1732196065106)
@@ -1,5 +1,6 @@
 package com.jobsearch.jobservice.services
 
+import com.jobsearch.jobservice.JobServiceApplication
 import com.jobsearch.jobservice.entities.FollowedJobs
 import com.jobsearch.jobservice.entities.Job
 import com.jobsearch.jobservice.entities.specifications.JobSpecifications
@@ -25,7 +26,8 @@
     private val followedJobRepository: FollowedJobRepository,
     private val quizService: QuizService,
     private val userServiceUtils: UserServiceUtils,
-    private val viewedJobService: ViewedJobService
+    private val viewedJobService: ViewedJobService,
+    jobServiceApplication: JobServiceApplication
 ): JobService {
 
     override fun createJob(jobRequest: JobRequest): JobResponse {
Index: src/main/kotlin/com/jobsearch/jobservice/controllers/JobController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.jobservice.controllers\n\nimport com.jobsearch.jobservice.requests.JobFilterRequest\nimport com.jobsearch.jobservice.requests.JobRequest\nimport com.jobsearch.jobservice.responses.DeleteJobResponse\nimport com.jobsearch.jobservice.responses.FollowJobResponse\nimport com.jobsearch.jobservice.responses.JobResponse\nimport com.jobsearch.jobservice.services.JobService\nimport org.springframework.data.domain.Page\nimport org.springframework.data.domain.PageRequest\nimport org.springframework.graphql.data.method.annotation.Argument\nimport org.springframework.graphql.data.method.annotation.MutationMapping\nimport org.springframework.graphql.data.method.annotation.QueryMapping\nimport org.springframework.security.access.prepost.PreAuthorize\nimport org.springframework.security.core.annotation.AuthenticationPrincipal\nimport org.springframework.stereotype.Controller\nimport java.util.*\n\n@Controller\nclass JobController(\n    private val jobService: JobService\n) {\n    @PreAuthorize(\"hasRole('RECRUITER')\")\n    @MutationMapping\n    fun createJob(\n        @Argument jobRequest: JobRequest\n    ): JobResponse {\n        return jobService.createJob(jobRequest)\n    }\n\n    @PreAuthorize(\"hasRole('RECRUITER')\")\n    @MutationMapping\n    fun deleteJob(\n        @Argument jobId: UUID\n    ): DeleteJobResponse {\n        return jobService.deleteJobById(jobId)\n    }\n\n    @PreAuthorize(\"hasRole('RECRUITER')\")\n    @MutationMapping\n    fun updateJob(\n        @Argument jobId: UUID,\n        @Argument jobRequest: JobRequest\n    ): JobResponse {\n        return jobService.updateJobById(jobId, jobRequest)\n    }\n\n    @PreAuthorize(\"hasRole('RECRUITER')\")\n    @MutationMapping\n    fun restoreJob(\n        @Argument jobId: UUID\n    ): JobResponse {\n        return jobService.restoreJobById(jobId)\n    }\n\n    @PreAuthorize(\"hasRole('RECRUITER')\")\n    @QueryMapping\n    fun jobsByRecruiter(\n        @AuthenticationPrincipal recruiterId: UUID\n    ): List<JobResponse> {\n        return jobService.getJobsByRecruiter(recruiterId)\n    }\n\n    @QueryMapping\n    fun jobsByCompany(\n        @Argument companyId: UUID\n    ): List<JobResponse> {\n        return jobService.getJobsByCompany(companyId)\n    }\n\n    @QueryMapping\n    fun jobById(\n        @AuthenticationPrincipal userId: UUID?,\n        @Argument jobId: UUID\n    ): JobResponse {\n        return jobService.getJobByIdAndDeleteFalse(userId, jobId)\n    }\n\n    @QueryMapping\n    fun jobs(\n        @Argument filter: JobFilterRequest?,\n        @Argument limit: Int?,\n        @Argument offset: Int?\n    ): Page<JobResponse> {\n        val pageable = PageRequest.of(offset ?: 0, limit ?: 10)\n        return jobService.getFilteredJobs(filter, pageable)\n    }\n\n    @MutationMapping\n    fun toggleFollowJob(\n        @Argument jobId: UUID,\n        @AuthenticationPrincipal userId: UUID\n    ): FollowJobResponse {\n        return jobService.toggleFollowJob(jobId, userId)\n    }\n\n    @QueryMapping\n    fun followedJobs(\n        @AuthenticationPrincipal userId: UUID\n    ): List<JobResponse> {\n        return jobService.getFollowedFilteredJobs(userId)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/com/jobsearch/jobservice/controllers/JobController.kt b/src/main/kotlin/com/jobsearch/jobservice/controllers/JobController.kt
--- a/src/main/kotlin/com/jobsearch/jobservice/controllers/JobController.kt	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/src/main/kotlin/com/jobsearch/jobservice/controllers/JobController.kt	(date 1732196065114)
@@ -14,9 +14,12 @@
 import org.springframework.security.access.prepost.PreAuthorize
 import org.springframework.security.core.annotation.AuthenticationPrincipal
 import org.springframework.stereotype.Controller
+import org.springframework.web.bind.annotation.GetMapping
+import org.springframework.web.bind.annotation.RestController
 import java.util.*
 
 @Controller
+@RestController
 class JobController(
     private val jobService: JobService
 ) {
@@ -86,6 +89,16 @@
         return jobService.getFilteredJobs(filter, pageable)
     }
 
+    @GetMapping("/getJobs")
+    fun jobsRest(
+        @Argument limit: Int?,
+        @Argument offset: Int?
+    ): Page<JobResponse> {
+        val pageable = PageRequest.of(offset ?: 0, limit ?: 10)
+        return jobService.getFilteredJobs(null, pageable)
+    }
+
+
     @MutationMapping
     fun toggleFollowJob(
         @Argument jobId: UUID,
Index: ../db_mockup/requirements.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>requests\ntqdm\nsqlalchemy\npsycopg\ndb_mockdata==0.2.01\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/requirements.txt b/../db_mockup/requirements.txt
--- a/../db_mockup/requirements.txt	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/../db_mockup/requirements.txt	(date 1732189462687)
@@ -2,4 +2,5 @@
 tqdm
 sqlalchemy
 psycopg
-db_mockdata==0.2.01
+numpy
+db_mockdata==0.4.04
Index: ../user-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Application config\nserver.port=8081\nspring.application.name=user-service\nspring.main.banner-mode=off\n# Database config\nspring.datasource.url=${DATASOURCE_URL}\nspring.datasource.username=${DATASOURCE_USERNAME}\nspring.datasource.password=${DATASOURCE_PASSWORD}\n# spring.datasource.url=jdbc:postgresql://172.22.0.1:5432/JobMarketDB\n# spring.datasource.username=admin\n# spring.datasource.password=test\nspring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n\nspring.jpa.show-sql=true\n\n# GraphQL\nspring.graphql.graphiql.enabled=true\n\n#LOGGING\ndebug_level=DEBUG\nlogging.level.org.springframework.web=${debug_level}\nlogging.level.org.hibernate=${debug_level}\nlogging.level.graphiql=${debug_level}\nlogging.level.graphql=${debug_level}\n\n# Eureka\n#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}\n\n# JWT\n#  jwt.secret=3245e6yr7ut8iur65e4r3e2ewrgthjctgdr43e2ewrgthyfj65td4rewd\n#  jwt.expiration-s=12000\n#  jwt.refresh-expiration-s=12000\njwt.secret=${JWT_SECRET}\njwt.expiration-s=${JWT_EXPIRATIONS_S:1800}\njwt.refresh-expiration-s=${JWT_REFRESH_EXPIRATIONS_S:86400}\n\n\n\n\n#RabbitMQ settings\nspring.rabbitmq.host=172.22.0.1\n#rabbitmq.virtualhost=/\nspring.rabbitmq.port=5672\n#rabbitmq.username=guest\n#rabbitmq.password=guest\n#rabbitmq.exchange=rabbitmq.exchange\n#rabbitmq.queue=rabbitmq.queue\n#rabbitmq.routingkey=rabbitmq.routingkey\n#rabbitmq.reply.timeout=60000\n#rabbitmq.concurrent.consumers=1\n#rabbitmq.max.concurrent.consumers=1\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../user-service/src/main/resources/application.properties b/../user-service/src/main/resources/application.properties
--- a/../user-service/src/main/resources/application.properties	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/../user-service/src/main/resources/application.properties	(date 1732191567862)
@@ -9,7 +9,7 @@
 # spring.datasource.url=jdbc:postgresql://172.22.0.1:5432/JobMarketDB
 # spring.datasource.username=admin
 # spring.datasource.password=test
-spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}
+spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
 
 spring.jpa.show-sql=true
Index: ../db_mockup/mockdata.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"connection\": \"postgresql+psycopg2://admin:test@172.22.0.2:5432/JobMarketDB\",\n  \"tables\": {\n    \"app_users\": {\n      \"user_id\": \"PK UUID\",\n      \"company\": \"FK_UUID company.company_id\",\n      \"email\": \"email UNIQUE\",\n      \"first_name\": \"first_name\",\n      \"last_name\": \"last_name\",\n      \"role\": \"first_name\",\n      \"is_blocked\": \"bool\",\n      \"email_verified\": \"bool\",\n      \"employee_verified\": \"bool\",\n      \"created_at\": \"timestamp\",\n      \"password_hash\": \"first_name\"\n    },\n    \"skills\": {\n      \"skill_id\": \"PK UUID\",\n      \"profile_id\": \"FK_UUID user_profiles.profile_id\",\n      \"skill_name\": \"first_name\",\n      \"proficiency_level\": \"first_name\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"chat_messages\": {\n      \"message_id\": \"PK UUID\",\n      \"chat_id\": \"FK_UUID chats.chat_id\",\n      \"content\": \"long_text\",\n      \"created_by\": \"FK_UUID app_users.user_id\",\n      \"created_by_display\": \"first_name\",\n      \"read_by\": \"first_name\",\n      \"deleted_by\": \"first_name\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"job\": {\n      \"job_id\": \"PK UUID\",\n      \"company_id\": \"FK_UUID company.company_id\",\n      \"job_title\": \"first_name\",\n      \"job_description\": \"long_text\",\n      \"required_skills\": \"long_text\",\n      \"required_experience\": \"long_text\",\n      \"location\": \"first_name\",\n      \"salary\": \"integer CONST None\",\n      \"created_at\": \"timestamp\"\n    },\n    \"experiences\": {\n      \"experience_id\": \"PK UUID\",\n      \"profile_id\": \"FK_UUID user_profiles.profile_id\",\n      \"company_name\": \"FK_UUID company.company_id\",\n      \"role\": \"first_name\",\n      \"start_date\": \"timestamp\",\n      \"end_date\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"educations\": {\n      \"education_id\": \"PK UUID\",\n      \"profile_id\": \"first_name\",\n      \"institution_name\": \"first_name\",\n      \"degree\": \"first_name\",\n      \"start_date\": \"timestamp\",\n      \"end_date\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"company\": {\n      \"company_id\": \"PK UUID\",\n      \"company_name\": \"first_name\",\n      \"email\": \"email UNIQUE\",\n      \"logoPath\": \"first_name\",\n      \"location\": \"first_name\",\n      \"industry\": \"first_name\",\n      \"description\": \"first_name\",\n      \"verified\": \"bool\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"chats\": {\n      \"chat_id\": \"PK UUID\",\n      \"name\": \"first_name\",\n      \"created_by\": \"first_name\",\n      \"deleted_by\": \"first_name\",\n      \"last_message\": \"first_name\",\n      \"tags\": \"first_name\",\n      \"created_at\": \"timestamp\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"IntermediaryTable: user_chats\":{\n      \"chat_id\": \"FK_UUID chats.chat_id\",\n      \"user_id\": \"FK_UUID app_users.user_id\"\n    },\n    \"user_profiles\": {\n      \"profile_id\": \"PK UUID\",\n      \"user_id\": \"FK_UUID app_users.user_id\",\n      \"resume_path\": \"first_name\",\n      \"profile_picture_path\": \"first_name\",\n      \"updated_at\": \"timestamp\"\n    },\n    \"user_settings\": {\n      \"settings_id\": \"PK UUID\",\n      \"user_id\": \"FK_UUID app_users.user_id\",\n      \"offers_notification\": \"bool\",\n      \"newsletter_notification\": \"bool\",\n      \"recruiter_messages\": \"bool\",\n      \"push_notification\": \"bool\",\n      \"updated_at\": \"timestamp\"\n    }\n  },\n  \"objects_count\": {\n    \"app_users\": 200,\n    \"skills\": 500,\n    \"chat_messages\": 8000,\n    \"job\": 250,\n    \"experiences\": 100,\n    \"educations\": 200,\n    \"company\": 20,\n    \"chats\": 50,\n    \"user_profiles\": 500,\n    \"user_settings\": 500,\n    \"user_chats\": 10000\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/mockdata.json b/../db_mockup/mockdata.json
--- a/../db_mockup/mockdata.json	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/../db_mockup/mockdata.json	(date 1732195306657)
@@ -1,120 +1,219 @@
 {
-  "connection": "postgresql+psycopg2://admin:test@172.22.0.2:5432/JobMarketDB",
-  "tables": {
-    "app_users": {
-      "user_id": "PK UUID",
-      "company": "FK_UUID company.company_id",
-      "email": "email UNIQUE",
-      "first_name": "first_name",
-      "last_name": "last_name",
-      "role": "first_name",
-      "is_blocked": "bool",
-      "email_verified": "bool",
-      "employee_verified": "bool",
-      "created_at": "timestamp",
-      "password_hash": "first_name"
-    },
-    "skills": {
-      "skill_id": "PK UUID",
-      "profile_id": "FK_UUID user_profiles.profile_id",
-      "skill_name": "first_name",
-      "proficiency_level": "first_name",
-      "updated_at": "timestamp"
-    },
-    "chat_messages": {
-      "message_id": "PK UUID",
-      "chat_id": "FK_UUID chats.chat_id",
-      "content": "long_text",
-      "created_by": "FK_UUID app_users.user_id",
-      "created_by_display": "first_name",
-      "read_by": "first_name",
-      "deleted_by": "first_name",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
-    },
-    "job": {
-      "job_id": "PK UUID",
-      "company_id": "FK_UUID company.company_id",
-      "job_title": "first_name",
-      "job_description": "long_text",
-      "required_skills": "long_text",
-      "required_experience": "long_text",
-      "location": "first_name",
-      "salary": "integer CONST None",
-      "created_at": "timestamp"
-    },
-    "experiences": {
-      "experience_id": "PK UUID",
-      "profile_id": "FK_UUID user_profiles.profile_id",
-      "company_name": "FK_UUID company.company_id",
-      "role": "first_name",
-      "start_date": "timestamp",
-      "end_date": "timestamp",
-      "updated_at": "timestamp"
-    },
-    "educations": {
-      "education_id": "PK UUID",
-      "profile_id": "first_name",
-      "institution_name": "first_name",
-      "degree": "first_name",
-      "start_date": "timestamp",
-      "end_date": "timestamp",
-      "updated_at": "timestamp"
-    },
-    "company": {
-      "company_id": "PK UUID",
-      "company_name": "first_name",
-      "email": "email UNIQUE",
-      "logoPath": "first_name",
-      "location": "first_name",
-      "industry": "first_name",
-      "description": "first_name",
-      "verified": "bool",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
-    },
-    "chats": {
-      "chat_id": "PK UUID",
-      "name": "first_name",
-      "created_by": "first_name",
-      "deleted_by": "first_name",
-      "last_message": "first_name",
-      "tags": "first_name",
-      "created_at": "timestamp",
-      "updated_at": "timestamp"
-    },
-    "IntermediaryTable: user_chats":{
-      "chat_id": "FK_UUID chats.chat_id",
-      "user_id": "FK_UUID app_users.user_id"
-    },
-    "user_profiles": {
-      "profile_id": "PK UUID",
-      "user_id": "FK_UUID app_users.user_id",
-      "resume_path": "first_name",
-      "profile_picture_path": "first_name",
-      "updated_at": "timestamp"
-    },
-    "user_settings": {
-      "settings_id": "PK UUID",
-      "user_id": "FK_UUID app_users.user_id",
-      "offers_notification": "bool",
-      "newsletter_notification": "bool",
-      "recruiter_messages": "bool",
-      "push_notification": "bool",
-      "updated_at": "timestamp"
-    }
-  },
-  "objects_count": {
-    "app_users": 200,
-    "skills": 500,
-    "chat_messages": 8000,
-    "job": 250,
-    "experiences": 100,
-    "educations": 200,
-    "company": 20,
-    "chats": 50,
-    "user_profiles": 500,
-    "user_settings": 500,
-    "user_chats": 10000
-  }
-}
+    "connection": "postgresql+psycopg2://admin:test@172.22.0.1:5432/JobMarketDB",
+    "tables": {
+      "app_users": {
+        "user_id": "PK UUID",
+        "company_id": "FK_UUID company.company_id",
+        "email": "email UNIQUE",
+        "is_email_verified": "boolean",
+        "is_employee_verified": "bool",
+        "password": "first_name",
+        "first_name": "first_name",
+        "last_name": "last_name",
+        "role": "OPTION IN (recruiter,applicant)",
+        "phone": "first_name",
+        "is_blocked": "bool",
+        "email_verified": "bool CONST True",
+        "employee_verified": "bool",
+        "is_enabled": "bool CONST True",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "password_hash": "first_name"
+      },
+      "skills": {
+        "skill_id": "PK UUID",
+        "profile_id": "FK_UUID user_profiles.profile_id",
+        "skill_name": "first_name",
+        "proficiency_level": "first_name",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "chat_messages": {
+        "message_id": "PK UUID",
+        "chat_id": "FK_UUID chats.chat_id",
+        "content": "long_text",
+        "created_by": "FK_UUID app_users.user_id",
+        "created_by_display": "first_name",
+        "read_by": "first_name",
+        "deleted_by": "first_name",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "jobs": {
+        "job_id": "PK UUID",
+        "company_id": "FK_UUID company.company_id",
+        "job_title": "first_name",
+        "quiz_id": "FK_UUID quizzes.quiz_id",
+        "job_description": "long_text",
+        "recruiter_id": "FK_UUID app_users.user_id",
+        "required_skills": "jsonb:json1 value:required_skills",
+        "required_experience": "long_text RANGE(4,10)",
+        "employment_type": "OPTION IN (full-time,part-time)",
+        "work_location": "OPTION IN (remote,hybrid,stationary)",
+        "is_deleted": "bool",
+        "location": "country+city(\"en_US\",\"en_GB\",\"fr_FR\",\"de_DE\",\"it_IT\",\"es_ES\",\"pl_PL\",\"nl_NL\",\"pt_PT\",\"sv_SE\",\"da_DK\",\"fi_FI\",\"no_NO\",\"cs_CZ\",\"hu_HU\",\"en_CA\",\"sk_SK\")",
+        "salary": "integer RANGE(4000,12000)",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "user_experience": {
+        "experience_id": "PK UUID",
+        "profile_id": "FK_UUID user_profiles.profile_id",
+        "company_name": "FK_UUID company.company_id",
+        "company_logo": "first_name",
+        "role": "first_name",
+        "start_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "end_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "applications":{
+        "application_id": "PK UUID",
+        "status": "smallint RANGE(1,6)",
+        "job_id": "FK_UUID jobs.job_id",
+        "quiz_result_id": "FK_UUID quiz_results.quiz_result_id",
+        "user_id": "FK_UUID app_users.user_id",
+        "s3_resume_path": "first_name",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "quiz_results": {
+        "quiz_result_id": "PK UUID",
+        "score": "float RANGE(0,100)",
+        "time_taken": "integer RANGE(20,2000) DISTRIBUTION(normal,mean=60,std=15)",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "applicant_id": "FK_UUID app_users.user_id",
+        "quiz_id": "FK_UUID quizzes.quiz_id"
+      },
+      "quizzes": {
+        "quiz_id": "PK UUID",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "is_deleted": "bool",
+        "quiz_url": "first_name",
+        "s3_quiz_path": "first_name",
+        "recruiter_id": "FK_UUID app_users.user_id"
+      },
+      "user_education": {
+        "education_id": "PK UUID",
+        "profile_id": "first_name",
+        "institution_name": "first_name",
+        "degree": "first_name",
+        "start_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "end_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "company": {
+        "company_id": "PK UUID",
+        "name": "OPTION IN (Google,Microsoft,Apple,Amazon,Meta,Tesla,Netflix,Nvidia,Intel,IBM,Oracle,Cisco,Adobe,Salesforce,VMware,Qualcomm,AMD,Twitter,Uber,Airbnb)",
+        "email": "email CONST 259905@student.pwr.edu.pl",
+        "logo_path": "first_name",
+        "location": "country+city(\"en_US\",\"en_GB\",\"fr_FR\",\"de_DE\",\"it_IT\",\"es_ES\",\"pl_PL\",\"nl_NL\",\"pt_PT\",\"sv_SE\",\"da_DK\",\"fi_FI\",\"no_NO\",\"cs_CZ\",\"hu_HU\",\"en_CA\",\"sk_SK\")",
+        "industry": "first_name",
+        "description": "first_name",
+        "is_email_verified": "bool CONST TRUE",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "chats": {
+        "chat_id": "PK UUID",
+        "name": "first_name",
+        "created_by": "first_name",
+        "deleted_by": "first_name",
+        "last_message": "first_name",
+        "tags": "first_name",
+        "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "IntermediaryTable: user_chats":{
+        "chat_id": "FK_UUID chats.chat_id",
+        "user_id": "FK_UUID app_users.user_id"
+      },
+      "user_profiles": {
+        "profile_id": "PK UUID",
+        "user_id": "FK_UUID app_users.user_id",
+        "resume_path": "first_name",
+        "profile_picture_path": "first_name",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "user_settings": {
+        "settings_id": "PK UUID",
+        "user_id": "FK_UUID app_users.user_id",
+        "offers_notification": "bool",
+        "newsletter_notification": "bool",
+        "recruiter_messages": "bool",
+        "push_notification": "bool",
+        "updated_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "IntermediaryTable: followed_jobs": {
+          "job_id": "FK_UUID jobs.job_id",
+          "user_id": "FK_UUID app_users.user_id",
+          "created_at": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "employee_verification_tokens": {
+        "token_id": "PK UUID",
+        "token": "first_name",
+        "user_id" : "FK_UUID app_users.user_id",
+        "company_id": "FK_UUID company.company_id",
+        "expiry_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      },
+      "IntermediaryTable: viewed_jobs": {
+        "user_id": "FK_UUID app_users.user_id",
+        "job_id": "FK_UUID jobs.job_id",
+        "view_count": "integer RANGE(10,200)"
+      },
+      "reset_password_tokens": {
+        "token_id": "PK UUID",
+        "token": "first_name",
+        "user_id" : "FK_UUID app_users.user_id",
+        "company_id": "FK_UUID company.company_id",
+        "expiry_date": "timestamp RANGE(2023-01-01 00:00:00,2024-12-01 22:12:00)"
+      }
+    },
+    "json_schemas": [
+      {
+        "json1": {
+          "fields": [
+            {
+              "required_skills": {
+                 "type": "array",
+                 "item_count": "RANGE(1, 5)",
+                 "content": {
+                    "type": "object",
+                    "fields": {
+                      "name": {
+                        "type": "string",
+                        "options": ["Python", "JavaScript", "Java", "C++", "Go", "Ruby"]
+                      },
+                      "level": {
+                        "type": "integer",
+                        "range": [1, 5]
+                      }
+                    }
+                 }
+              }
+            }
+          ]
+        }
+      }
+    ],
+    "objects_count": {
+      "app_users": 5,
+      "skills": 50,
+      "chat_messages": 6,
+      "jobs": 25,
+      "user_experience": 10,
+      "user_education": 20,
+      "company": 5,
+      "chats": 1,
+      "user_profiles": 2,
+      "user_settings": 2,
+      "user_chats": 2,
+      "quizzes": 2,
+      "quiz_results": 2,
+      "applications": 2,
+      "followed_jobs": 20,
+      "viewed_jobs": 2,
+      "employee_verification_tokens": 4,
+      "reset_password_tokens": 1
+    }
+  }
+  
\ No newline at end of file
Index: ../db_mockup/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>FROM python:alpine3.20\n\nRUN apk add libpq-dev python3-dev gcc musl-dev libc-dev make\n\nCOPY db_mockup/mockdata.json .\n\nCOPY db_mockup/requirements.txt .\n\nRUN python3 -m pip install -r requirements.txt\n\nCMD python --version && cat mockdata.json && cat requirements.txt && python3 -m db_mockdata.main -f mockdata.json
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../db_mockup/Dockerfile b/../db_mockup/Dockerfile
--- a/../db_mockup/Dockerfile	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/../db_mockup/Dockerfile	(date 1732190678651)
@@ -2,10 +2,10 @@
 
 RUN apk add libpq-dev python3-dev gcc musl-dev libc-dev make
 
-COPY db_mockup/mockdata.json .
-
 COPY db_mockup/requirements.txt .
 
 RUN python3 -m pip install -r requirements.txt
 
+COPY db_mockup/mockdata.json .
+
 CMD python --version && cat mockdata.json && cat requirements.txt && python3 -m db_mockdata.main -f mockdata.json
\ No newline at end of file
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=8083\nspring.application.name=job-service\n\n# Eureka\n#eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE:http://localhost:8761/eureka/}\n\n# Database config\nspring.datasource.url=${DATASOURCE_URL}\nspring.datasource.username=${DATASOURCE_USERNAME}\nspring.datasource.password=${DATASOURCE_PASSWORD}\nspring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}\nspring.jpa.show-sql=true\nspring.datasource.hikari.auto-commit=false\n\n\n# AWS\naws.access.key=${AWS_ACCESS_KEY}\naws.secret.key=${AWS_SECRET_KEY}\naws.session.token=${AWS_SESSION_TOKEN}\naws.s3.bucket=${AWS_S3_BUCKET}\naws.region=us-east-1\n\nuser.service.url=${USER_SERVICE_URL}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/src/main/resources/application.properties	(date 1732191570607)
@@ -8,7 +8,7 @@
 spring.datasource.url=${DATASOURCE_URL}
 spring.datasource.username=${DATASOURCE_USERNAME}
 spring.datasource.password=${DATASOURCE_PASSWORD}
-spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:create}
+spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
 spring.jpa.show-sql=true
 spring.datasource.hikari.auto-commit=false
 
Index: ../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.jobsearch.apigateway.config\n\nimport org.springframework.util.AntPathMatcher\n\nenum class PublicEndpoint(val pattern: String) {\n    PUBLIC(\"/public\"),\n    LOGIN(\"/user-service/login\"),\n    REGISTER(\"/user-service/register/**\"),\n    VERIFICATION(\"/user-service/verification/**\"),\n    TOKEN(\"/user-service/token/**\"),\n    RESET_PASSWORD(\"/user-service/resetPassword\"),\n    UPDATE_PASSWORD(\"/user-service/updatePassword\"),\n    ERROR(\"/user-service/error\");\n\n\n\n    companion object {\n        private val pathMatcher = AntPathMatcher()\n\n        fun isPublicPath(path: String): Boolean {\n            return entries.any { endpoint ->\n                pathMatcher.match(endpoint.pattern, path)\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt
--- a/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt	(revision 60e9ab6c78eb754ca3a44070c010d4e6dd5c57a5)
+++ b/../api-gateway/src/main/kotlin/com/jobsearch/apigateway/config/PublicEndpoint.kt	(date 1732195611114)
@@ -10,6 +10,8 @@
     TOKEN("/user-service/token/**"),
     RESET_PASSWORD("/user-service/resetPassword"),
     UPDATE_PASSWORD("/user-service/updatePassword"),
+    GET_COMPANIES("/user-service/getCompanies"),
+    GET_JOBS("job-service/getJobs"),
     ERROR("/user-service/error");
 
 
