type Job {
    jobId: ID!
    companyId: ID!
    title: String!
    description: String!
    requiredSkills: String!
    requiredExperience: String!
    location: String!
    salary: Float
    createdAt: String!
    isDeleted: Boolean!
}

type Application {
    applicationId: ID!
    userId: ID!
    job: Job!
    applicationDate: String!
    status: String!
    resumeUrl: String!
}

type Query {
    jobById(jobId: ID!): Job
    allJobs(limit: Int, offset: Int): [Job]
    userApplications: [Application]
    jobApplications(jobId: ID!): [Application]
    jobsByRecruiter: [Job]
    jobsByCompany(companyId: ID!): [Job]
    filteredJobs(filter: JobFilterRequest, limit: Int, offset: Int): JobPage
}

type Mutation {
    createJob(jobRequest: JobInput!): Job
    setApplicationStatus(applicationId: ID!, status: String!): SetApplicationStatusResponse
    deleteJob(jobId: ID!): DeleteJobResponse!
    updateJob(jobId: ID!, jobRequest: JobInput!): Job
    restoreJob(jobId: ID!): Job
}

input JobInput {
    title: String!
    description: String!
    location: String!
    salary: Float
    requiredSkills: [SkillInput!]!
    requiredExperience: String!
}

input JobFilterRequest {
    title: String
    location: String
    requiredExperience: String
    requiredSkills: [String]
    companyId: ID
    hasSalary: Boolean
    minSalary: Int
    maxSalary: Int
}

type JobPage {
    content: [Job]
    totalPages: Int
    totalElements: Int
}

type DeleteJobResponse {
    success: Boolean!
    message: String!
}

type SetApplicationStatusResponse {
    success: Boolean!
    message: String!
}

input SkillInput {
    name: String!
    level: Int!
}